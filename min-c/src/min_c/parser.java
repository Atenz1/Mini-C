
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 18 23:25:38 CST 2022
//----------------------------------------------------

package min_c;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 18 23:25:38 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\007\000\002\014" +
    "\004\000\002\014\002\000\002\004\016\000\002\004\014" +
    "\000\002\011\007\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\002\000\002" +
    "\064\006\000\002\064\004\000\002\065\002\000\002\064" +
    "\011\000\002\064\004\000\002\064\004\000\002\013\007" +
    "\000\002\013\005\000\002\013\002\000\002\015\004\000" +
    "\002\015\005\000\002\015\002\000\002\060\004\000\002" +
    "\060\005\000\002\060\004\000\002\060\005\000\002\060" +
    "\002\000\002\061\004\000\002\061\005\000\002\061\002" +
    "\000\002\062\004\000\002\062\005\000\002\062\002\000" +
    "\002\063\004\000\002\063\005\000\002\063\004\000\002" +
    "\063\005\000\002\063\002\000\002\020\011\000\002\017" +
    "\013\000\002\017\017\000\002\021\005\000\002\021\005" +
    "\000\002\021\002\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\003\000\002\016\023\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\012\010\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\012\010\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\006\000\002\012\007\000\002\012\011\000\002\057" +
    "\013\000\002\057\013\000\002\057\013\000\002\057\013" +
    "\000\002\057\007\000\002\057\007\000\002\057\007\000" +
    "\002\057\007\000\002\057\007\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\002\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\004\004\001\002\000\004\032\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\034\006\031\013\032\016\026\017\025\021\027\030" +
    "\012\031\021\033\uffe9\042\010\043\022\044\024\047\023" +
    "\053\015\001\002\000\006\005\365\054\366\001\002\000" +
    "\036\006\031\013\032\016\026\017\025\021\027\024\uffe9" +
    "\030\012\031\021\033\uffe9\042\010\043\022\044\024\047" +
    "\023\053\015\001\002\000\006\010\356\011\355\001\002" +
    "\000\036\006\031\013\032\016\026\017\025\021\027\024" +
    "\uffe9\030\012\031\021\033\uffe9\042\010\043\022\044\024" +
    "\047\023\053\015\001\002\000\036\006\031\013\032\016" +
    "\026\017\025\021\027\024\uffe9\030\012\031\021\033\uffe9" +
    "\042\010\043\022\044\024\047\023\053\015\001\002\000" +
    "\004\044\344\001\002\000\036\006\031\013\032\016\026" +
    "\017\025\021\027\024\uffe9\030\012\031\021\033\uffe9\042" +
    "\010\043\022\044\024\047\023\053\015\001\002\000\036" +
    "\006\031\013\032\016\026\017\025\021\027\024\uffe9\030" +
    "\012\031\021\033\uffe9\042\010\043\022\044\024\047\023" +
    "\053\015\001\002\000\004\033\277\001\002\000\006\010" +
    "\276\011\275\001\002\000\004\054\271\001\002\000\006" +
    "\005\237\054\240\001\002\000\006\005\213\054\214\001" +
    "\002\000\004\034\205\001\002\000\004\034\156\001\002" +
    "\000\004\034\124\001\002\000\036\006\031\013\032\016" +
    "\026\017\025\021\027\024\uffe9\030\012\031\021\033\uffe9" +
    "\042\010\043\022\044\024\047\023\053\015\001\002\000" +
    "\010\007\065\031\064\034\063\001\002\000\006\005\037" +
    "\054\040\001\002\000\036\006\031\013\032\016\026\017" +
    "\025\021\027\024\uffe9\030\012\031\021\033\uffe9\042\010" +
    "\043\022\044\024\047\023\053\015\001\002\000\036\006" +
    "\031\013\032\016\026\017\025\021\027\024\uffe9\030\012" +
    "\031\021\033\uffe9\042\010\043\022\044\024\047\023\053" +
    "\015\001\002\000\006\024\ufff1\033\ufff1\001\002\000\006" +
    "\024\ufff0\033\ufff0\001\002\000\004\006\056\001\002\000" +
    "\004\005\041\001\002\000\004\006\042\001\002\000\006" +
    "\007\044\026\043\001\002\000\036\006\uffaa\013\uffaa\016" +
    "\uffaa\017\uffaa\021\uffaa\024\uffaa\030\uffaa\031\uffaa\033\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\047\uffaa\053\uffaa\001\002\000" +
    "\004\055\045\001\002\000\010\013\046\051\047\056\uffd2" +
    "\001\002\000\010\013\046\051\047\056\uffd2\001\002\000" +
    "\004\013\053\001\002\000\004\056\051\001\002\000\004" +
    "\026\052\001\002\000\036\006\uffaf\013\uffaf\016\uffaf\017" +
    "\uffaf\021\uffaf\024\uffaf\030\uffaf\031\uffaf\033\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\047\uffaf\053\uffaf\001\002\000\010\013" +
    "\046\051\047\056\uffd2\001\002\000\004\056\uffd3\001\002" +
    "\000\004\056\uffd4\001\002\000\006\007\060\026\057\001" +
    "\002\000\036\006\uffb5\013\uffb5\016\uffb5\017\uffb5\021\uffb5" +
    "\024\uffb5\030\uffb5\031\uffb5\033\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\047\uffb5\053\uffb5\001\002\000\004\050\061\001\002" +
    "\000\004\026\062\001\002\000\036\006\uffba\013\uffba\016" +
    "\uffba\017\uffba\021\uffba\024\uffba\030\uffba\031\uffba\033\uffba" +
    "\042\uffba\043\uffba\044\uffba\047\uffba\053\uffba\001\002\000" +
    "\010\006\113\035\uffdd\051\114\001\002\000\004\031\111" +
    "\001\002\000\020\006\073\010\071\011\067\012\066\014" +
    "\075\015\070\050\072\001\002\000\004\026\110\001\002" +
    "\000\004\026\107\001\002\000\004\026\106\001\002\000" +
    "\012\006\103\026\102\030\012\031\021\001\002\000\004" +
    "\026\100\001\002\000\006\026\077\034\063\001\002\000" +
    "\036\006\ufff2\013\ufff2\016\ufff2\017\ufff2\021\ufff2\024\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\042\ufff2\043\ufff2\044\ufff2\047" +
    "\ufff2\053\ufff2\001\002\000\004\026\076\001\002\000\036" +
    "\006\ufff4\013\ufff4\016\ufff4\017\ufff4\021\ufff4\024\ufff4\030" +
    "\ufff4\031\ufff4\033\ufff4\042\ufff4\043\ufff4\044\ufff4\047\ufff4" +
    "\053\ufff4\001\002\000\036\006\ufff3\013\ufff3\016\ufff3\017" +
    "\ufff3\021\ufff3\024\ufff3\030\ufff3\031\ufff3\033\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\047\ufff3\053\ufff3\001\002\000\036\006" +
    "\ufff6\013\ufff6\016\ufff6\017\ufff6\021\ufff6\024\ufff6\030\ufff6" +
    "\031\ufff6\033\ufff6\042\ufff6\043\ufff6\044\ufff6\047\ufff6\053" +
    "\ufff6\001\002\000\036\006\uffe8\013\uffe8\016\uffe8\017\uffe8" +
    "\021\uffe8\024\uffe8\030\uffe8\031\uffe8\033\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\047\uffe8\053\uffe8\001\002\000\036\006\ufff9" +
    "\013\ufff9\016\ufff9\017\ufff9\021\ufff9\024\ufff9\030\ufff9\031" +
    "\ufff9\033\ufff9\042\ufff9\043\ufff9\044\ufff9\047\ufff9\053\ufff9" +
    "\001\002\000\004\007\104\001\002\000\004\010\105\001" +
    "\002\000\010\006\103\030\012\031\021\001\002\000\036" +
    "\006\ufff5\013\ufff5\016\ufff5\017\ufff5\021\ufff5\024\ufff5\030" +
    "\ufff5\031\ufff5\033\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5" +
    "\053\ufff5\001\002\000\036\006\ufff8\013\ufff8\016\ufff8\017" +
    "\ufff8\021\ufff8\024\ufff8\030\ufff8\031\ufff8\033\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\047\ufff8\053\ufff8\001\002\000\036\006" +
    "\ufff7\013\ufff7\016\ufff7\017\ufff7\021\ufff7\024\ufff7\030\ufff7" +
    "\031\ufff7\033\ufff7\042\ufff7\043\ufff7\044\ufff7\047\ufff7\053" +
    "\ufff7\001\002\000\004\026\112\001\002\000\036\006\ufffa" +
    "\013\ufffa\016\ufffa\017\ufffa\021\ufffa\024\ufffa\030\ufffa\031" +
    "\ufffa\033\ufffa\042\ufffa\043\ufffa\044\ufffa\047\ufffa\053\ufffa" +
    "\001\002\000\010\006\113\035\uffdd\051\114\001\002\000" +
    "\004\006\120\001\002\000\004\035\116\001\002\000\004" +
    "\026\117\001\002\000\036\006\ufffb\013\ufffb\016\ufffb\017" +
    "\ufffb\021\ufffb\024\ufffb\030\ufffb\031\ufffb\033\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\047\ufffb\053\ufffb\001\002\000\010\006" +
    "\113\035\uffdd\051\114\001\002\000\004\035\uffde\001\002" +
    "\000\004\035\uffdf\001\002\000\006\024\uffef\033\uffef\001" +
    "\002\000\006\006\126\014\127\001\002\000\010\035\uffc7" +
    "\040\136\041\137\001\002\000\004\027\130\001\002\000" +
    "\010\035\uffc1\040\uffc1\041\uffc1\001\002\000\014\006\134" +
    "\010\133\011\131\014\135\015\132\001\002\000\010\035" +
    "\uffc2\040\uffc2\041\uffc2\001\002\000\010\035\uffc4\040\uffc4" +
    "\041\uffc4\001\002\000\010\035\uffc3\040\uffc3\041\uffc3\001" +
    "\002\000\010\035\uffc6\040\uffc6\041\uffc6\001\002\000\010" +
    "\035\uffc5\040\uffc5\041\uffc5\001\002\000\006\006\126\014" +
    "\127\001\002\000\006\006\126\014\127\001\002\000\004" +
    "\035\141\001\002\000\004\045\142\001\002\000\004\032" +
    "\143\001\002\000\034\006\031\013\032\016\026\017\025" +
    "\021\027\030\012\031\021\033\uffe9\042\010\043\022\044" +
    "\024\047\023\053\015\001\002\000\004\033\145\001\002" +
    "\000\040\006\uffcb\013\uffcb\016\uffcb\017\uffcb\021\uffcb\022" +
    "\146\024\uffcb\030\uffcb\031\uffcb\033\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\047\uffcb\053\uffcb\001\002\000\004\032\147\001" +
    "\002\000\034\006\031\013\032\016\026\017\025\021\027" +
    "\030\012\031\021\033\uffe9\042\010\043\022\044\024\047" +
    "\023\053\015\001\002\000\004\033\151\001\002\000\036" +
    "\006\uffca\013\uffca\016\uffca\017\uffca\021\uffca\024\uffca\030" +
    "\uffca\031\uffca\033\uffca\042\uffca\043\uffca\044\uffca\047\uffca" +
    "\053\uffca\001\002\000\010\035\uffc7\040\136\041\137\001" +
    "\002\000\004\035\uffc8\001\002\000\010\035\uffc7\040\136" +
    "\041\137\001\002\000\004\035\uffc9\001\002\000\004\042" +
    "\157\001\002\000\004\005\160\001\002\000\004\006\161" +
    "\001\002\000\004\007\162\001\002\000\004\010\163\001" +
    "\002\000\004\026\164\001\002\000\006\006\167\010\166" +
    "\001\002\000\004\026\175\001\002\000\004\027\173\001" +
    "\002\000\004\027\170\001\002\000\006\006\172\010\171" +
    "\001\002\000\004\026\uffbf\001\002\000\004\026\uffbd\001" +
    "\002\000\004\006\174\001\002\000\004\026\uffbe\001\002" +
    "\000\004\006\176\001\002\000\004\031\177\001\002\000" +
    "\004\031\200\001\002\000\004\035\201\001\002\000\004" +
    "\032\202\001\002\000\034\006\031\013\032\016\026\017" +
    "\025\021\027\030\012\031\021\033\uffe9\042\010\043\022" +
    "\044\024\047\023\053\015\001\002\000\004\033\204\001" +
    "\002\000\036\006\uffc0\013\uffc0\016\uffc0\017\uffc0\021\uffc0" +
    "\024\uffc0\030\uffc0\031\uffc0\033\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\047\uffc0\053\uffc0\001\002\000\006\006\126\014\127" +
    "\001\002\000\004\035\207\001\002\000\004\032\210\001" +
    "\002\000\034\006\031\013\032\016\026\017\025\021\027" +
    "\030\012\031\021\033\uffe9\042\010\043\022\044\024\047" +
    "\023\053\015\001\002\000\004\033\212\001\002\000\036" +
    "\006\uffcc\013\uffcc\016\uffcc\017\uffcc\021\uffcc\024\uffcc\030" +
    "\uffcc\031\uffcc\033\uffcc\042\uffcc\043\uffcc\044\uffcc\047\uffcc" +
    "\053\uffcc\001\002\000\004\006\232\001\002\000\004\005" +
    "\215\001\002\000\004\006\216\001\002\000\006\007\220" +
    "\026\217\001\002\000\036\006\uffab\013\uffab\016\uffab\017" +
    "\uffab\021\uffab\024\uffab\030\uffab\031\uffab\033\uffab\042\uffab" +
    "\043\uffab\044\uffab\047\uffab\053\uffab\001\002\000\004\055" +
    "\221\001\002\000\010\012\222\051\224\056\uffd5\001\002" +
    "\000\010\012\222\051\224\056\uffd5\001\002\000\004\056" +
    "\227\001\002\000\004\012\225\001\002\000\010\012\222" +
    "\051\224\056\uffd5\001\002\000\004\056\uffd6\001\002\000" +
    "\004\026\230\001\002\000\036\006\uffb0\013\uffb0\016\uffb0" +
    "\017\uffb0\021\uffb0\024\uffb0\030\uffb0\031\uffb0\033\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\047\uffb0\053\uffb0\001\002\000\004" +
    "\056\uffd7\001\002\000\006\007\234\026\233\001\002\000" +
    "\036\006\uffb6\013\uffb6\016\uffb6\017\uffb6\021\uffb6\024\uffb6" +
    "\030\uffb6\031\uffb6\033\uffb6\042\uffb6\043\uffb6\044\uffb6\047" +
    "\uffb6\053\uffb6\001\002\000\004\012\235\001\002\000\004" +
    "\026\236\001\002\000\036\006\uffbb\013\uffbb\016\uffbb\017" +
    "\uffbb\021\uffbb\024\uffbb\030\uffbb\031\uffbb\033\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\047\uffbb\053\uffbb\001\002\000\004\006" +
    "\262\001\002\000\004\005\241\001\002\000\004\006\242" +
    "\001\002\000\006\007\244\026\243\001\002\000\036\006" +
    "\uffa9\013\uffa9\016\uffa9\017\uffa9\021\uffa9\024\uffa9\030\uffa9" +
    "\031\uffa9\033\uffa9\042\uffa9\043\uffa9\044\uffa9\047\uffa9\053" +
    "\uffa9\001\002\000\004\055\245\001\002\000\012\014\251" +
    "\015\246\051\250\056\uffcd\001\002\000\012\014\251\015" +
    "\246\051\250\056\uffcd\001\002\000\004\056\257\001\002" +
    "\000\006\014\254\015\253\001\002\000\012\014\251\015" +
    "\246\051\250\056\uffcd\001\002\000\004\056\uffd1\001\002" +
    "\000\012\014\251\015\246\051\250\056\uffcd\001\002\000" +
    "\012\014\251\015\246\051\250\056\uffcd\001\002\000\004" +
    "\056\uffd0\001\002\000\004\056\uffce\001\002\000\004\026" +
    "\260\001\002\000\036\006\uffae\013\uffae\016\uffae\017\uffae" +
    "\021\uffae\024\uffae\030\uffae\031\uffae\033\uffae\042\uffae\043" +
    "\uffae\044\uffae\047\uffae\053\uffae\001\002\000\004\056\uffcf" +
    "\001\002\000\006\007\264\026\263\001\002\000\036\006" +
    "\uffb4\013\uffb4\016\uffb4\017\uffb4\021\uffb4\024\uffb4\030\uffb4" +
    "\031\uffb4\033\uffb4\042\uffb4\043\uffb4\044\uffb4\047\uffb4\053" +
    "\uffb4\001\002\000\006\014\266\015\265\001\002\000\004" +
    "\026\270\001\002\000\004\026\267\001\002\000\036\006" +
    "\uffb9\013\uffb9\016\uffb9\017\uffb9\021\uffb9\024\uffb9\030\uffb9" +
    "\031\uffb9\033\uffb9\042\uffb9\043\uffb9\044\uffb9\047\uffb9\053" +
    "\uffb9\001\002\000\036\006\uffb8\013\uffb8\016\uffb8\017\uffb8" +
    "\021\uffb8\024\uffb8\030\uffb8\031\uffb8\033\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\047\uffb8\053\uffb8\001\002\000\004\005\272" +
    "\001\002\000\004\006\273\001\002\000\004\026\274\001" +
    "\002\000\036\006\uffac\013\uffac\016\uffac\017\uffac\021\uffac" +
    "\024\uffac\030\uffac\031\uffac\033\uffac\042\uffac\043\uffac\044" +
    "\uffac\047\uffac\053\uffac\001\002\000\036\006\uffe4\013\uffe4" +
    "\016\uffe4\017\uffe4\021\uffe4\024\uffe4\030\uffe4\031\uffe4\033" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\047\uffe4\053\uffe4\001\002" +
    "\000\036\006\uffe7\013\uffe7\016\uffe7\017\uffe7\021\uffe7\024" +
    "\uffe7\030\uffe7\031\uffe7\033\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\047\uffe7\053\uffe7\001\002\000\006\002\ufffe\052\302\001" +
    "\002\000\006\002\ufffe\052\302\001\002\000\004\002\000" +
    "\001\002\000\020\005\uff9c\013\306\042\310\043\303\044" +
    "\305\046\307\047\304\001\002\000\004\005\uffa0\001\002" +
    "\000\004\005\uff9e\001\002\000\004\005\uff9d\001\002\000" +
    "\004\005\uff9f\001\002\000\004\005\331\001\002\000\004" +
    "\005\uffa1\001\002\000\004\005\312\001\002\000\004\006" +
    "\313\001\002\000\004\034\314\001\002\000\020\005\uff9c" +
    "\013\306\035\uffe0\042\310\043\303\044\305\047\304\001" +
    "\002\000\004\035\323\001\002\000\004\005\317\001\002" +
    "\000\004\006\320\001\002\000\006\035\uffe1\051\321\001" +
    "\002\000\020\005\uff9c\013\306\035\uffe0\042\310\043\303" +
    "\044\305\047\304\001\002\000\004\035\uffe2\001\002\000" +
    "\004\032\324\001\002\000\034\006\031\013\032\016\026" +
    "\017\025\021\027\024\uffe9\030\012\031\021\042\010\043" +
    "\022\044\024\047\023\053\015\001\002\000\004\024\326" +
    "\001\002\000\004\006\327\001\002\000\004\033\330\001" +
    "\002\000\006\002\ufffd\052\ufffd\001\002\000\004\006\332" +
    "\001\002\000\004\034\333\001\002\000\020\005\uff9c\013" +
    "\306\035\uffe0\042\310\043\303\044\305\047\304\001\002" +
    "\000\004\035\335\001\002\000\004\032\336\001\002\000" +
    "\034\006\031\013\032\016\026\017\025\021\027\030\012" +
    "\031\021\033\uffe9\042\010\043\022\044\024\047\023\053" +
    "\015\001\002\000\004\033\340\001\002\000\006\002\ufffc" +
    "\052\ufffc\001\002\000\004\002\uffff\001\002\000\006\024" +
    "\uffed\033\uffed\001\002\000\006\024\uffeb\033\uffeb\001\002" +
    "\000\004\005\345\001\002\000\004\006\346\001\002\000" +
    "\006\007\350\026\347\001\002\000\036\006\uffb3\013\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\024\uffb3\030\uffb3\031\uffb3\033" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\047\uffb3\053\uffb3\001\002" +
    "\000\004\012\351\001\002\000\004\026\352\001\002\000" +
    "\036\006\uffb2\013\uffb2\016\uffb2\017\uffb2\021\uffb2\024\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\042\uffb2\043\uffb2\044\uffb2\047" +
    "\uffb2\053\uffb2\001\002\000\006\024\uffee\033\uffee\001\002" +
    "\000\006\024\uffec\033\uffec\001\002\000\036\006\uffe3\013" +
    "\uffe3\016\uffe3\017\uffe3\021\uffe3\024\uffe3\030\uffe3\031\uffe3" +
    "\033\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3\053\uffe3\001" +
    "\002\000\004\006\uffe6\001\002\000\004\006\360\001\002" +
    "\000\004\007\361\001\002\000\004\011\362\001\002\000" +
    "\010\006\103\030\012\031\021\001\002\000\036\006\uffe5" +
    "\013\uffe5\016\uffe5\017\uffe5\021\uffe5\024\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\042\uffe5\043\uffe5\044\uffe5\047\uffe5\053\uffe5" +
    "\001\002\000\006\024\uffea\033\uffea\001\002\000\004\006" +
    "\u0108\001\002\000\004\005\367\001\002\000\004\006\370" +
    "\001\002\000\006\007\372\026\371\001\002\000\036\006" +
    "\uffad\013\uffad\016\uffad\017\uffad\021\uffad\024\uffad\030\uffad" +
    "\031\uffad\033\uffad\042\uffad\043\uffad\044\uffad\047\uffad\053" +
    "\uffad\001\002\000\004\055\373\001\002\000\012\010\376" +
    "\011\374\051\377\056\uffd8\001\002\000\012\010\376\011" +
    "\374\051\377\056\uffd8\001\002\000\004\056\u0105\001\002" +
    "\000\012\010\376\011\374\051\377\056\uffd8\001\002\000" +
    "\006\010\u0101\043\u0100\001\002\000\012\010\376\011\374" +
    "\051\377\056\uffd8\001\002\000\012\010\376\011\374\051" +
    "\377\056\uffd8\001\002\000\004\056\uffd9\001\002\000\004" +
    "\056\uffdb\001\002\000\004\056\uffda\001\002\000\004\026" +
    "\u0106\001\002\000\036\006\uffb1\013\uffb1\016\uffb1\017\uffb1" +
    "\021\uffb1\024\uffb1\030\uffb1\031\uffb1\033\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\047\uffb1\053\uffb1\001\002\000\004\056\uffdc" +
    "\001\002\000\006\007\u010a\026\u0109\001\002\000\036\006" +
    "\uffb7\013\uffb7\016\uffb7\017\uffb7\021\uffb7\024\uffb7\030\uffb7" +
    "\031\uffb7\033\uffb7\042\uffb7\043\uffb7\044\uffb7\047\uffb7\053" +
    "\uffb7\001\002\000\004\010\u010b\001\002\000\004\026\u010c" +
    "\001\002\000\036\006\uffbc\013\uffbc\016\uffbc\017\uffbc\021" +
    "\uffbc\024\uffbc\030\uffbc\031\uffbc\033\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\047\uffbc\053\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\015\005\017" +
    "\011\012\012\033\016\027\017\016\020\013\057\032\064" +
    "\010\001\001\000\002\001\001\000\024\003\015\005\363" +
    "\011\012\012\033\016\027\017\016\020\013\057\032\064" +
    "\010\001\001\000\002\001\001\000\024\003\015\005\353" +
    "\011\012\012\033\016\027\017\016\020\013\057\032\064" +
    "\010\001\001\000\024\003\015\005\352\011\012\012\033" +
    "\016\027\017\016\020\013\057\032\064\010\001\001\000" +
    "\002\001\001\000\024\003\015\005\342\011\012\012\033" +
    "\016\027\017\016\020\013\057\032\064\010\001\001\000" +
    "\024\003\015\005\341\011\012\012\033\016\027\017\016" +
    "\020\013\057\032\064\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\015\005\122\011\012\012\033\016\027" +
    "\017\016\020\013\057\032\064\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\015\005\035\011\012" +
    "\012\033\016\027\017\016\020\013\057\032\064\010\001" +
    "\001\000\024\003\015\005\034\011\012\012\033\016\027" +
    "\017\016\020\013\057\032\064\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\047\001\001\000\004\062\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\114\001\001\000\002\001\001\000\004\011" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\124\001\001\000\004\021\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\153\001\001\000" +
    "\004\007\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\015\005\143\011\012\012" +
    "\033\016\027\017\016\020\013\057\032\064\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\015\005\147\011\012\012\033\016\027\017\016" +
    "\020\013\057\032\064\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\152\001\001\000\002\001\001" +
    "\000\004\021\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\015\005\202\011\012\012\033\016\027" +
    "\017\016\020\013\057\032\064\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\015\005\210\011" +
    "\012\012\033\016\027\017\016\020\013\057\032\064\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\222\001" +
    "\001\000\004\061\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\246\001\001\000\004\063\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\251\001\001\000\002\001\001\000\004\063\255\001\001" +
    "\000\004\063\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\277\014\300\001\001\000\006\004\277\014" +
    "\340\001\001\000\002\001\001\000\004\032\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\314\032\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\321\032" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\015\005\324\011\012\012\033\016\027\017\016\020" +
    "\013\057\032\064\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\333\032\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\015\005" +
    "\336\011\012\012\033\016\027\017\016\020\013\057\032" +
    "\064\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\374\001\001\000\004\060\u0106" +
    "\001\001\000\002\001\001\000\004\060\u0103\001\001\000" +
    "\002\001\001\000\004\060\u0102\001\001\000\004\060\u0101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static int erroresSintacticos=0;
    public int cont = 1;
    public static Nodo padre;
    ArrayList output = new ArrayList();



private Symbol s;
    //obtenidos de la clase Token
public String token_name_from_id(int id){
    switch(id){
        case 0: return "EOF";
        case 1: return "error";
        case 2: return "ITSMAIN";
        case 3: return "ITSDECLARE";
        case 4: return "ITSID";
        case 5: return "ITSASSIGNMENT";
        case 6: return "ITSNUMINT";
        case 7: return "ITSSTRING";
        case 8: return "ITSCHAR";
        case 9: return "ITSTRUE";
        case 10: return "ITSFALSE";
        case 11: return "ITSFOR";
        case 12: return "ITSWHILE";
        case 13: return "ITSSWITCH";
        case 14: return "ITSCOLON";
        case 15: return "ITSSCENARIO";
        case 16: return "ITSIF";
        case 17: return "ITSELSE";
        case 18: return "ITSBRK";
        case 19: return "ITSRETURN";
        case 20: return "ITSNULL";
        case 21: return "ITSSEMICOLON";
        case 22: return "ITSOPREL";
        case 23: return "ITSOPMULT";
        case 24: return "ITSOPSUM";
        case 25: return "ITSBRA_L";
        case 26: return "ITSBRA_R";
        case 27: return "ITSPAR_L";
        case 28: return "ITSPAR_R";
        case 29: return "ITSDFT";
        case 30: return "ITSEXIT";
        case 31: return "ITSCOMMENT";
        case 32: return "ITSAND";
        case 33: return "ITSOR";
        case 34: return "ITSINT";
        case 35: return "ITSSTR";
        case 36: return "ITSTHEN";
        case 37: return "ITSVOID";
        case 38: return "ITSBOOLEAN";
        case 39: return "ITSCHARACTER";
        case 40: return "ITSCOMMA";
        case 41: return "ITSFUNCTION";
        case 42: return "ITSL_COMMENT";
        case 43: return "ITSCONST";
        case 44: return "ITSARRAY";
        case 45: return "ITSBRACKET_L";
        case 46: return "ITSBRACKET_R";

        
        default: return "N/A";
    }
}

//adding
public void syntax_error(Symbol s) {

        //report_error("Error de sintaxis. No se esperaba el siguiente token: <" + s.value + ">. linea: " + (s.left ) + ", columna: " + (s.right ) +     "\n", null);
        
        output.add("Error de sintaxis. No se esperaba el siguiente token: <" + s.value + ">. linea: " + (s.left ) + ", columna: " + (s.right ) +     "\n");
        
        erroresSintacticos++;

        List expected = expected_token_ids();
        if (expected.size() != 0) {
            int id;
            //System.out.println("Se esperaba...");
            output.add("Se esperaba...");
            for (int i = 0; i < expected.size(); i++) {
                id = (int) expected.get(i);
                if (i == expected.size() - 1) {
                    //System.out.println(token_name_from_id(id));
                    output.add(token_name_from_id(id));
                } else {
                    //System.out.print(token_name_from_id(id) + " | ");
                    output.add(token_name_from_id(id) + " | ");
                }
            }
        } else { /* do nothing */ }
}
@Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        //System.out.println("No se pudo reparar y continuar el análisis.");
        output.add("No se pudo reparar y continuar el análisis.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TYPE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TYPE ::= ITSSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TYPE ::= ITSBOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TYPE ::= ITSCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPE ::= ITSDOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPE ::= ITSINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALUE ::= ITSFALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALUE ::= ITSTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALUE ::= ITSNUMDOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALUE ::= ITSNUMINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALUE ::= ITSCHARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALUE ::= ITSSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARRAY ::= ITSBOOLEAN ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARRAY ::= ITSCHAR ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARRAY ::= ITSSTR ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARRAY ::= ITSDOUBLE ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARRAY ::= ITSINT ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARRAY ::= ITSBOOLEAN ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILLBOOL ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARRAY ::= ITSCHAR ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILLCHAR ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARRAY ::= ITSSTR ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILLSTRING ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARRAY ::= ITSINT ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILL ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARE ::= ITSCONST ITSSTR ITSDECLARE ITSID ITSASSIGNMENT ITSSTRING ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un const string con variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARE ::= ITSCONST ITSSTR ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una const string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARE ::= ITSBOOLEAN ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARE ::= ITSCHAR ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARE ::= ITSSTR ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARE ::= ITSINT ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARE ::= ITSBOOLEAN ITSDECLARE ITSID ITSASSIGNMENT ITSFALSE ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un boolean falso");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARE ::= ITSBOOLEAN ITSDECLARE ITSID ITSASSIGNMENT ITSTRUE ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un boolean verdadero");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARE ::= ITSCHAR ITSDECLARE ITSID ITSASSIGNMENT ITSCHARACTER ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARE ::= ITSSTR ITSDECLARE ITSID ITSASSIGNMENT ITSSTRING ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARE ::= ITSINT ITSDECLARE ITSID ITSASSIGNMENT ITSNUMINT ITSSEMICOLON 
            {
              Object RESULT =null;
		 parser.output.add("Se detecto una declaracion de entero");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMPARE ::= ITSID ITSOPREL ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COMPARE ::= ITSNUMINT ITSOPREL ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COMPARE ::= ITSID ITSOPREL ITSNUMINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FOR ::= ITSFOR ITSPAR_L ITSINT ITSDECLARE ITSID ITSASSIGNMENT ITSNUMINT ITSSEMICOLON COMPARE ITSSEMICOLON ITSID ITSOPSUM ITSOPSUM ITSPAR_R ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio un ciclo for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDITION ::= ITSTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDITION ::= ITSID ITSOPREL ITSNUMDOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDITION ::= ITSID ITSOPREL ITSNUMINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDITION ::= ITSID ITSOPREL ITSFALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDITION ::= ITSID ITSOPREL ITSTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDITION ::= ITSID ITSOPREL ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COND_AND_OR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_AND_OR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND_AND_OR ::= ITSOR CONDITION COND_AND_OR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_AND_OR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND_AND_OR ::= ITSAND CONDITION COND_AND_OR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_AND_OR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= ITSIF ITSPAR_L CONDITION COND_AND_OR ITSPAR_R ITSTHEN ITSBRA_L STATEMENTS ITSBRA_R ITSELSE ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio el bloque IFELSE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= ITSIF ITSPAR_L CONDITION COND_AND_OR ITSPAR_R ITSTHEN ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio el bloque if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WHILE ::= ITSWHILE ITSPAR_L CONDITION ITSPAR_R ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se detecto un Ciclo While");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FILLBOOL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FILLBOOL ::= ITSCOMMA ITSFALSE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FILLBOOL ::= ITSFALSE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FILLBOOL ::= ITSCOMMA ITSTRUE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FILLBOOL ::= ITSTRUE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FILLCHAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLCHAR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FILLCHAR ::= ITSCOMMA ITSCHAR FILLCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLCHAR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FILLCHAR ::= ITSCHAR FILLCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLCHAR",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FILLSTRING ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLSTRING",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FILLSTRING ::= ITSCOMMA ITSSTRING FILLSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLSTRING",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FILLSTRING ::= ITSSTRING FILLSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLSTRING",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FILL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FILL ::= ITSCOMMA ITSNUMINT FILL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FILL ::= ITSNUMINT FILL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FILL ::= ITSCOMMA ITSDOUBLE FILL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FILL ::= ITSNUMDOUBLE FILL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAM ::= ITSCOMMA ITSID PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAM ::= ITSID PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARGS ::= TYPE ITSDECLARE ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGS ::= TYPE ITSDECLARE ITSID ITSCOMMA ARGS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // XPR ::= ITSOPMULT ITSNUMDOUBLE 
            {
              Object RESULT =null;
		parser.output.add("Se detecto OPERACION MULT O DIV");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // XPR ::= ITSOPSUM ITSNUMDOUBLE 
            {
              Object RESULT =null;
		parser.output.add("Se detecto OPERACION SUMA O RESTA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // XPR ::= ITSOPMULT ITSNUMINT NT$0 ITSID ITSASSIGNMENT ITSNUMDOUBLE XPR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              Object RESULT =null;
parser.output.add("Se detecto OPERACION MULT O DIV");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // XPR ::= ITSOPSUM ITSNUMINT 
            {
              Object RESULT =null;
		parser.output.add("Se detecto OPERACION SUMA O RESTA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // XPR ::= ITSID ITSASSIGNMENT ITSNUMINT XPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTS ::= XPR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= VARIABLE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= CALL STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= IF STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= FOR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= ARRAY STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= DECLARE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLE ::= ITSID ITSASSIGNMENT CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE ::= ITSID ITSASSIGNMENT ITSID ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLE ::= ITSID ITSASSIGNMENT ITSTRUE ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= ITSID ITSASSIGNMENT ITSFALSE ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= ITSID ITSASSIGNMENT ITSCHARACTER ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLE ::= ITSID ITSASSIGNMENT ITSSTRING ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLE ::= ITSID ITSASSIGNMENT ITSNUMDOUBLE ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= ITSID ITSASSIGNMENT ITSNUMINT ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLE ::= ITSID ITSOPSUM ITSOPSUM ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CALL ::= ITSID ITSPAR_L PARAM ITSPAR_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se llamo a una Funcion.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNC ::= ITSFUNCTION ITSVOID ITSDECLARE ITSID ITSPAR_L ARGS ITSPAR_R ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio una funcion void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNC ::= ITSFUNCTION TYPE ITSDECLARE ITSID ITSPAR_L ARGS ITSPAR_R ITSBRA_L STATEMENTS ITSRETURN ITSID ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio una funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCS ::= FUNC FUNCS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ITSMAIN ITSBRA_L STATEMENTS ITSBRA_R FUNCS 
            {
              Object RESULT =null;
		int manleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int manright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object man = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.output.add("Se ha reconocido el MAIN");
    
    //Nodo nodo = new Nodo();
    //nodo.setEtiqueta("Main");
    //nodo.setID(parser.cont);
    //parser.cont++;

    //nodo.addHijos((Nodo) man);
    //nodo.addHijos((Nodo) st);
    //nodo.addHijos((Nodo) fn);

    //parser.padre = nodo;

    //RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

