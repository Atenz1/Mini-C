
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 29 17:37:15 CST 2022
//----------------------------------------------------

package min_c;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 29 17:37:15 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\007\000\002\014" +
    "\004\000\002\014\002\000\002\004\016\000\002\004\014" +
    "\000\002\011\007\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\002\000\002" +
    "\070\006\000\002\070\004\000\002\070\004\000\002\013" +
    "\007\000\002\013\005\000\002\013\002\000\002\015\004" +
    "\000\002\015\005\000\002\015\002\000\002\064\004\000" +
    "\002\064\005\000\002\064\002\000\002\065\004\000\002" +
    "\065\005\000\002\065\002\000\002\066\004\000\002\066" +
    "\005\000\002\066\002\000\002\067\004\000\002\067\005" +
    "\000\002\067\004\000\002\067\005\000\002\067\002\000" +
    "\002\020\011\000\002\017\013\000\002\017\017\000\002" +
    "\021\005\000\002\021\005\000\002\021\002\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\016\023\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\024\011\000\002" +
    "\025\011\000\002\025\011\000\002\025\007\000\002\025" +
    "\002\000\002\012\010\000\002\012\010\000\002\012\010" +
    "\000\002\012\010\000\002\012\010\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\007\000\002\012\011\000\002\063\013\000\002\063" +
    "\013\000\002\063\013\000\002\063\013\000\002\063\007" +
    "\000\002\063\007\000\002\063\007\000\002\063\007\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\002\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\004\004\001\002\000\004\033\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\034\006\032\012\033\015\027\016\026\021\010\022" +
    "\030\031\012\032\023\034\uffe9\044\011\045\025\050\024" +
    "\054\016\001\002\000\004\035\374\001\002\000\006\005" +
    "\350\055\351\001\002\000\004\010\347\001\002\000\040" +
    "\006\032\012\033\015\027\016\026\021\010\022\030\024" +
    "\uffe9\025\uffe9\031\012\032\023\034\uffe9\044\011\045\025" +
    "\050\024\054\016\001\002\000\040\006\032\012\033\015" +
    "\027\016\026\021\010\022\030\024\uffe9\025\uffe9\031\012" +
    "\032\023\034\uffe9\044\011\045\025\050\024\054\016\001" +
    "\002\000\040\006\032\012\033\015\027\016\026\021\010" +
    "\022\030\024\uffe9\025\uffe9\031\012\032\023\034\uffe9\044" +
    "\011\045\025\050\024\054\016\001\002\000\004\045\335" +
    "\001\002\000\040\006\032\012\033\015\027\016\026\021" +
    "\010\022\030\024\uffe9\025\uffe9\031\012\032\023\034\uffe9" +
    "\044\011\045\025\050\024\054\016\001\002\000\040\006" +
    "\032\012\033\015\027\016\026\021\010\022\030\024\uffe9" +
    "\025\uffe9\031\012\032\023\034\uffe9\044\011\045\025\050" +
    "\024\054\016\001\002\000\040\006\032\012\033\015\027" +
    "\016\026\021\010\022\030\024\uffe9\025\uffe9\031\012\032" +
    "\023\034\uffe9\044\011\045\025\050\024\054\016\001\002" +
    "\000\004\034\270\001\002\000\004\010\267\001\002\000" +
    "\006\005\235\055\236\001\002\000\006\005\211\055\212" +
    "\001\002\000\004\035\203\001\002\000\004\035\154\001" +
    "\002\000\004\035\123\001\002\000\040\006\032\012\033" +
    "\015\027\016\026\021\010\022\030\024\uffe9\025\uffe9\031" +
    "\012\032\023\034\uffe9\044\011\045\025\050\024\054\016" +
    "\001\002\000\010\007\066\032\065\035\064\001\002\000" +
    "\006\005\040\055\041\001\002\000\040\006\032\012\033" +
    "\015\027\016\026\021\010\022\030\024\uffe9\025\uffe9\031" +
    "\012\032\023\034\uffe9\044\011\045\025\050\024\054\016" +
    "\001\002\000\040\006\032\012\033\015\027\016\026\021" +
    "\010\022\030\024\uffe9\025\uffe9\031\012\032\023\034\uffe9" +
    "\044\011\045\025\050\024\054\016\001\002\000\010\024" +
    "\ufff2\025\ufff2\034\ufff2\001\002\000\010\024\ufff1\025\ufff1" +
    "\034\ufff1\001\002\000\004\006\057\001\002\000\004\005" +
    "\042\001\002\000\004\006\043\001\002\000\006\007\045" +
    "\027\044\001\002\000\040\006\uffac\012\uffac\015\uffac\016" +
    "\uffac\021\uffac\022\uffac\024\uffac\025\uffac\031\uffac\032\uffac" +
    "\034\uffac\044\uffac\045\uffac\050\uffac\054\uffac\001\002\000" +
    "\004\056\046\001\002\000\010\012\047\052\050\057\uffd7" +
    "\001\002\000\010\012\047\052\050\057\uffd7\001\002\000" +
    "\004\012\054\001\002\000\004\057\052\001\002\000\004" +
    "\027\053\001\002\000\040\006\uffb0\012\uffb0\015\uffb0\016" +
    "\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0\031\uffb0\032\uffb0" +
    "\034\uffb0\044\uffb0\045\uffb0\050\uffb0\054\uffb0\001\002\000" +
    "\010\012\047\052\050\057\uffd7\001\002\000\004\057\uffd8" +
    "\001\002\000\004\057\uffd9\001\002\000\006\007\061\027" +
    "\060\001\002\000\040\006\uffb6\012\uffb6\015\uffb6\016\uffb6" +
    "\021\uffb6\022\uffb6\024\uffb6\025\uffb6\031\uffb6\032\uffb6\034" +
    "\uffb6\044\uffb6\045\uffb6\050\uffb6\054\uffb6\001\002\000\004" +
    "\051\062\001\002\000\004\027\063\001\002\000\040\006" +
    "\uffbb\012\uffbb\015\uffbb\016\uffbb\021\uffbb\022\uffbb\024\uffbb" +
    "\025\uffbb\031\uffbb\032\uffbb\034\uffbb\044\uffbb\045\uffbb\050" +
    "\uffbb\054\uffbb\001\002\000\010\006\112\036\uffe0\052\113" +
    "\001\002\000\004\032\110\001\002\000\016\006\073\010" +
    "\071\011\067\013\074\014\072\051\070\001\002\000\004" +
    "\027\107\001\002\000\004\027\106\001\002\000\012\006" +
    "\103\027\102\031\012\032\023\001\002\000\004\027\100" +
    "\001\002\000\006\027\077\035\064\001\002\000\004\027" +
    "\076\001\002\000\040\006\ufff3\012\ufff3\015\ufff3\016\ufff3" +
    "\021\ufff3\022\ufff3\024\ufff3\025\ufff3\031\ufff3\032\ufff3\034" +
    "\ufff3\044\ufff3\045\ufff3\050\ufff3\054\ufff3\001\002\000\040" +
    "\006\ufff5\012\ufff5\015\ufff5\016\ufff5\021\ufff5\022\ufff5\024" +
    "\ufff5\025\ufff5\031\ufff5\032\ufff5\034\ufff5\044\ufff5\045\ufff5" +
    "\050\ufff5\054\ufff5\001\002\000\040\006\ufff4\012\ufff4\015" +
    "\ufff4\016\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\031\ufff4" +
    "\032\ufff4\034\ufff4\044\ufff4\045\ufff4\050\ufff4\054\ufff4\001" +
    "\002\000\040\006\ufff6\012\ufff6\015\ufff6\016\ufff6\021\ufff6" +
    "\022\ufff6\024\ufff6\025\ufff6\031\ufff6\032\ufff6\034\ufff6\044" +
    "\ufff6\045\ufff6\050\ufff6\054\ufff6\001\002\000\040\006\uffe8" +
    "\012\uffe8\015\uffe8\016\uffe8\021\uffe8\022\uffe8\024\uffe8\025" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\044\uffe8\045\uffe8\050\uffe8" +
    "\054\uffe8\001\002\000\040\006\ufff9\012\ufff9\015\ufff9\016" +
    "\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\031\ufff9\032\ufff9" +
    "\034\ufff9\044\ufff9\045\ufff9\050\ufff9\054\ufff9\001\002\000" +
    "\004\007\104\001\002\000\004\010\105\001\002\000\010" +
    "\006\103\031\012\032\023\001\002\000\040\006\ufff7\012" +
    "\ufff7\015\ufff7\016\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7" +
    "\031\ufff7\032\ufff7\034\ufff7\044\ufff7\045\ufff7\050\ufff7\054" +
    "\ufff7\001\002\000\040\006\ufff8\012\ufff8\015\ufff8\016\ufff8" +
    "\021\ufff8\022\ufff8\024\ufff8\025\ufff8\031\ufff8\032\ufff8\034" +
    "\ufff8\044\ufff8\045\ufff8\050\ufff8\054\ufff8\001\002\000\004" +
    "\027\111\001\002\000\040\006\ufffa\012\ufffa\015\ufffa\016" +
    "\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\031\ufffa\032\ufffa" +
    "\034\ufffa\044\ufffa\045\ufffa\050\ufffa\054\ufffa\001\002\000" +
    "\010\006\112\036\uffe0\052\113\001\002\000\004\006\117" +
    "\001\002\000\004\036\115\001\002\000\004\027\116\001" +
    "\002\000\040\006\ufffb\012\ufffb\015\ufffb\016\ufffb\021\ufffb" +
    "\022\ufffb\024\ufffb\025\ufffb\031\ufffb\032\ufffb\034\ufffb\044" +
    "\ufffb\045\ufffb\050\ufffb\054\ufffb\001\002\000\010\006\112" +
    "\036\uffe0\052\113\001\002\000\004\036\uffe1\001\002\000" +
    "\004\036\uffe2\001\002\000\010\024\ufff0\025\ufff0\034\ufff0" +
    "\001\002\000\006\006\125\013\126\001\002\000\010\036" +
    "\uffcc\042\134\043\135\001\002\000\004\030\127\001\002" +
    "\000\010\036\uffc7\042\uffc7\043\uffc7\001\002\000\012\006" +
    "\132\010\131\013\133\014\130\001\002\000\010\036\uffc9" +
    "\042\uffc9\043\uffc9\001\002\000\010\036\uffc8\042\uffc8\043" +
    "\uffc8\001\002\000\010\036\uffcb\042\uffcb\043\uffcb\001\002" +
    "\000\010\036\uffca\042\uffca\043\uffca\001\002\000\006\006" +
    "\125\013\126\001\002\000\006\006\125\013\126\001\002" +
    "\000\004\036\137\001\002\000\004\046\140\001\002\000" +
    "\004\033\141\001\002\000\034\006\032\012\033\015\027" +
    "\016\026\021\010\022\030\031\012\032\023\034\uffe9\044" +
    "\011\045\025\050\024\054\016\001\002\000\004\034\143" +
    "\001\002\000\042\006\uffd0\012\uffd0\015\uffd0\016\uffd0\021" +
    "\uffd0\022\uffd0\023\144\024\uffd0\025\uffd0\031\uffd0\032\uffd0" +
    "\034\uffd0\044\uffd0\045\uffd0\050\uffd0\054\uffd0\001\002\000" +
    "\004\033\145\001\002\000\034\006\032\012\033\015\027" +
    "\016\026\021\010\022\030\031\012\032\023\034\uffe9\044" +
    "\011\045\025\050\024\054\016\001\002\000\004\034\147" +
    "\001\002\000\040\006\uffcf\012\uffcf\015\uffcf\016\uffcf\021" +
    "\uffcf\022\uffcf\024\uffcf\025\uffcf\031\uffcf\032\uffcf\034\uffcf" +
    "\044\uffcf\045\uffcf\050\uffcf\054\uffcf\001\002\000\010\036" +
    "\uffcc\042\134\043\135\001\002\000\004\036\uffcd\001\002" +
    "\000\010\036\uffcc\042\134\043\135\001\002\000\004\036" +
    "\uffce\001\002\000\004\044\155\001\002\000\004\005\156" +
    "\001\002\000\004\006\157\001\002\000\004\007\160\001" +
    "\002\000\004\010\161\001\002\000\004\027\162\001\002" +
    "\000\006\006\165\010\164\001\002\000\004\027\173\001" +
    "\002\000\004\030\171\001\002\000\004\030\166\001\002" +
    "\000\006\006\170\010\167\001\002\000\004\027\uffc5\001" +
    "\002\000\004\027\uffc3\001\002\000\004\006\172\001\002" +
    "\000\004\027\uffc4\001\002\000\004\006\174\001\002\000" +
    "\004\032\175\001\002\000\004\032\176\001\002\000\004" +
    "\036\177\001\002\000\004\033\200\001\002\000\034\006" +
    "\032\012\033\015\027\016\026\021\010\022\030\031\012" +
    "\032\023\034\uffe9\044\011\045\025\050\024\054\016\001" +
    "\002\000\004\034\202\001\002\000\040\006\uffc6\012\uffc6" +
    "\015\uffc6\016\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\031" +
    "\uffc6\032\uffc6\034\uffc6\044\uffc6\045\uffc6\050\uffc6\054\uffc6" +
    "\001\002\000\006\006\125\013\126\001\002\000\004\036" +
    "\205\001\002\000\004\033\206\001\002\000\034\006\032" +
    "\012\033\015\027\016\026\021\010\022\030\031\012\032" +
    "\023\034\uffe9\044\011\045\025\050\024\054\016\001\002" +
    "\000\004\034\210\001\002\000\040\006\uffd1\012\uffd1\015" +
    "\uffd1\016\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1\031\uffd1" +
    "\032\uffd1\034\uffd1\044\uffd1\045\uffd1\050\uffd1\054\uffd1\001" +
    "\002\000\004\006\230\001\002\000\004\005\213\001\002" +
    "\000\004\006\214\001\002\000\006\007\216\027\215\001" +
    "\002\000\040\006\uffad\012\uffad\015\uffad\016\uffad\021\uffad" +
    "\022\uffad\024\uffad\025\uffad\031\uffad\032\uffad\034\uffad\044" +
    "\uffad\045\uffad\050\uffad\054\uffad\001\002\000\004\056\217" +
    "\001\002\000\010\011\220\052\222\057\uffda\001\002\000" +
    "\010\011\220\052\222\057\uffda\001\002\000\004\057\225" +
    "\001\002\000\004\011\223\001\002\000\010\011\220\052" +
    "\222\057\uffda\001\002\000\004\057\uffdb\001\002\000\004" +
    "\027\226\001\002\000\040\006\uffb1\012\uffb1\015\uffb1\016" +
    "\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\031\uffb1\032\uffb1" +
    "\034\uffb1\044\uffb1\045\uffb1\050\uffb1\054\uffb1\001\002\000" +
    "\004\057\uffdc\001\002\000\006\007\232\027\231\001\002" +
    "\000\040\006\uffb7\012\uffb7\015\uffb7\016\uffb7\021\uffb7\022" +
    "\uffb7\024\uffb7\025\uffb7\031\uffb7\032\uffb7\034\uffb7\044\uffb7" +
    "\045\uffb7\050\uffb7\054\uffb7\001\002\000\004\011\233\001" +
    "\002\000\004\027\234\001\002\000\040\006\uffbc\012\uffbc" +
    "\015\uffbc\016\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\031" +
    "\uffbc\032\uffbc\034\uffbc\044\uffbc\045\uffbc\050\uffbc\054\uffbc" +
    "\001\002\000\004\006\260\001\002\000\004\005\237\001" +
    "\002\000\004\006\240\001\002\000\006\007\242\027\241" +
    "\001\002\000\040\006\uffab\012\uffab\015\uffab\016\uffab\021" +
    "\uffab\022\uffab\024\uffab\025\uffab\031\uffab\032\uffab\034\uffab" +
    "\044\uffab\045\uffab\050\uffab\054\uffab\001\002\000\004\056" +
    "\243\001\002\000\012\013\247\014\244\052\246\057\uffd2" +
    "\001\002\000\012\013\247\014\244\052\246\057\uffd2\001" +
    "\002\000\004\057\255\001\002\000\006\013\252\014\251" +
    "\001\002\000\012\013\247\014\244\052\246\057\uffd2\001" +
    "\002\000\004\057\uffd6\001\002\000\012\013\247\014\244" +
    "\052\246\057\uffd2\001\002\000\012\013\247\014\244\052" +
    "\246\057\uffd2\001\002\000\004\057\uffd5\001\002\000\004" +
    "\057\uffd3\001\002\000\004\027\256\001\002\000\040\006" +
    "\uffaf\012\uffaf\015\uffaf\016\uffaf\021\uffaf\022\uffaf\024\uffaf" +
    "\025\uffaf\031\uffaf\032\uffaf\034\uffaf\044\uffaf\045\uffaf\050" +
    "\uffaf\054\uffaf\001\002\000\004\057\uffd4\001\002\000\006" +
    "\007\262\027\261\001\002\000\040\006\uffb5\012\uffb5\015" +
    "\uffb5\016\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\031\uffb5" +
    "\032\uffb5\034\uffb5\044\uffb5\045\uffb5\050\uffb5\054\uffb5\001" +
    "\002\000\006\013\264\014\263\001\002\000\004\027\266" +
    "\001\002\000\004\027\265\001\002\000\040\006\uffba\012" +
    "\uffba\015\uffba\016\uffba\021\uffba\022\uffba\024\uffba\025\uffba" +
    "\031\uffba\032\uffba\034\uffba\044\uffba\045\uffba\050\uffba\054" +
    "\uffba\001\002\000\040\006\uffb9\012\uffb9\015\uffb9\016\uffb9" +
    "\021\uffb9\022\uffb9\024\uffb9\025\uffb9\031\uffb9\032\uffb9\034" +
    "\uffb9\044\uffb9\045\uffb9\050\uffb9\054\uffb9\001\002\000\040" +
    "\006\uffe7\012\uffe7\015\uffe7\016\uffe7\021\uffe7\022\uffe7\024" +
    "\uffe7\025\uffe7\031\uffe7\032\uffe7\034\uffe7\044\uffe7\045\uffe7" +
    "\050\uffe7\054\uffe7\001\002\000\006\002\ufffe\053\273\001" +
    "\002\000\006\002\ufffe\053\273\001\002\000\004\002\000" +
    "\001\002\000\016\005\uffa0\012\276\044\300\045\275\047" +
    "\277\050\274\001\002\000\004\005\uffa2\001\002\000\004" +
    "\005\uffa1\001\002\000\004\005\uffa3\001\002\000\004\005" +
    "\321\001\002\000\004\005\uffa4\001\002\000\004\005\302" +
    "\001\002\000\004\006\303\001\002\000\004\035\304\001" +
    "\002\000\016\005\uffa0\012\276\036\uffe3\044\300\045\275" +
    "\050\274\001\002\000\004\036\313\001\002\000\004\005" +
    "\307\001\002\000\004\006\310\001\002\000\006\036\uffe4" +
    "\052\311\001\002\000\016\005\uffa0\012\276\036\uffe3\044" +
    "\300\045\275\050\274\001\002\000\004\036\uffe5\001\002" +
    "\000\004\033\314\001\002\000\034\006\032\012\033\015" +
    "\027\016\026\021\010\022\030\025\uffe9\031\012\032\023" +
    "\044\011\045\025\050\024\054\016\001\002\000\004\025" +
    "\316\001\002\000\004\006\317\001\002\000\004\034\320" +
    "\001\002\000\006\002\ufffd\053\ufffd\001\002\000\004\006" +
    "\322\001\002\000\004\035\323\001\002\000\016\005\uffa0" +
    "\012\276\036\uffe3\044\300\045\275\050\274\001\002\000" +
    "\004\036\325\001\002\000\004\033\326\001\002\000\034" +
    "\006\032\012\033\015\027\016\026\021\010\022\030\031" +
    "\012\032\023\034\uffe9\044\011\045\025\050\024\054\016" +
    "\001\002\000\004\034\330\001\002\000\006\002\ufffc\053" +
    "\ufffc\001\002\000\004\002\uffff\001\002\000\010\024\uffee" +
    "\025\uffee\034\uffee\001\002\000\010\024\uffed\025\uffed\034" +
    "\uffed\001\002\000\010\024\uffeb\025\uffeb\034\uffeb\001\002" +
    "\000\004\005\336\001\002\000\004\006\337\001\002\000" +
    "\006\007\341\027\340\001\002\000\040\006\uffb4\012\uffb4" +
    "\015\uffb4\016\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\031" +
    "\uffb4\032\uffb4\034\uffb4\044\uffb4\045\uffb4\050\uffb4\054\uffb4" +
    "\001\002\000\004\011\342\001\002\000\004\027\343\001" +
    "\002\000\040\006\uffb3\012\uffb3\015\uffb3\016\uffb3\021\uffb3" +
    "\022\uffb3\024\uffb3\025\uffb3\031\uffb3\032\uffb3\034\uffb3\044" +
    "\uffb3\045\uffb3\050\uffb3\054\uffb3\001\002\000\010\024\uffec" +
    "\025\uffec\034\uffec\001\002\000\010\024\uffef\025\uffef\034" +
    "\uffef\001\002\000\010\024\uffea\025\uffea\034\uffea\001\002" +
    "\000\040\006\uffe6\012\uffe6\015\uffe6\016\uffe6\021\uffe6\022" +
    "\uffe6\024\uffe6\025\uffe6\031\uffe6\032\uffe6\034\uffe6\044\uffe6" +
    "\045\uffe6\050\uffe6\054\uffe6\001\002\000\004\006\367\001" +
    "\002\000\004\005\352\001\002\000\004\006\353\001\002" +
    "\000\006\007\355\027\354\001\002\000\040\006\uffae\012" +
    "\uffae\015\uffae\016\uffae\021\uffae\022\uffae\024\uffae\025\uffae" +
    "\031\uffae\032\uffae\034\uffae\044\uffae\045\uffae\050\uffae\054" +
    "\uffae\001\002\000\004\056\356\001\002\000\010\010\360" +
    "\052\361\057\uffdd\001\002\000\004\057\365\001\002\000" +
    "\010\010\360\052\361\057\uffdd\001\002\000\004\010\362" +
    "\001\002\000\010\010\360\052\361\057\uffdd\001\002\000" +
    "\004\057\uffde\001\002\000\004\057\uffdf\001\002\000\004" +
    "\027\366\001\002\000\040\006\uffb2\012\uffb2\015\uffb2\016" +
    "\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\031\uffb2\032\uffb2" +
    "\034\uffb2\044\uffb2\045\uffb2\050\uffb2\054\uffb2\001\002\000" +
    "\006\007\371\027\370\001\002\000\040\006\uffb8\012\uffb8" +
    "\015\uffb8\016\uffb8\021\uffb8\022\uffb8\024\uffb8\025\uffb8\031" +
    "\uffb8\032\uffb8\034\uffb8\044\uffb8\045\uffb8\050\uffb8\054\uffb8" +
    "\001\002\000\004\010\372\001\002\000\004\027\373\001" +
    "\002\000\040\006\uffbd\012\uffbd\015\uffbd\016\uffbd\021\uffbd" +
    "\022\uffbd\024\uffbd\025\uffbd\031\uffbd\032\uffbd\034\uffbd\044" +
    "\uffbd\045\uffbd\050\uffbd\054\uffbd\001\002\000\004\006\375" +
    "\001\002\000\004\036\376\001\002\000\004\033\377\001" +
    "\002\000\010\020\u0102\034\uffbe\037\u0100\001\002\000\004" +
    "\017\u0110\001\002\000\004\034\u010f\001\002\000\006\010" +
    "\u0103\051\u0104\001\002\000\004\017\u010a\001\002\000\004" +
    "\017\u0105\001\002\000\034\006\032\012\033\015\027\016" +
    "\026\021\010\022\030\024\uffe9\031\012\032\023\044\011" +
    "\045\025\050\024\054\016\001\002\000\004\024\u0107\001" +
    "\002\000\004\027\u0108\001\002\000\010\020\u0102\034\uffbe" +
    "\037\u0100\001\002\000\004\034\uffc0\001\002\000\034\006" +
    "\032\012\033\015\027\016\026\021\010\022\030\024\uffe9" +
    "\031\012\032\023\044\011\045\025\050\024\054\016\001" +
    "\002\000\004\024\u010c\001\002\000\004\027\u010d\001\002" +
    "\000\010\020\u0102\034\uffbe\037\u0100\001\002\000\004\034" +
    "\uffc1\001\002\000\040\006\uffc2\012\uffc2\015\uffc2\016\uffc2" +
    "\021\uffc2\022\uffc2\024\uffc2\025\uffc2\031\uffc2\032\uffc2\034" +
    "\uffc2\044\uffc2\045\uffc2\050\uffc2\054\uffc2\001\002\000\034" +
    "\006\032\012\033\015\027\016\026\021\010\022\030\024" +
    "\uffe9\031\012\032\023\044\011\045\025\050\024\054\016" +
    "\001\002\000\004\024\u0112\001\002\000\004\027\u0113\001" +
    "\002\000\004\034\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\016\005\021" +
    "\011\014\012\034\016\030\017\020\020\013\024\017\063" +
    "\033\070\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\016\005\345\011\014\012" +
    "\034\016\030\017\020\020\013\024\017\063\033\070\012" +
    "\001\001\000\026\003\016\005\344\011\014\012\034\016" +
    "\030\017\020\020\013\024\017\063\033\070\012\001\001" +
    "\000\026\003\016\005\343\011\014\012\034\016\030\017" +
    "\020\020\013\024\017\063\033\070\012\001\001\000\002" +
    "\001\001\000\026\003\016\005\333\011\014\012\034\016" +
    "\030\017\020\020\013\024\017\063\033\070\012\001\001" +
    "\000\026\003\016\005\332\011\014\012\034\016\030\017" +
    "\020\020\013\024\017\063\033\070\012\001\001\000\026" +
    "\003\016\005\331\011\014\012\034\016\030\017\020\020" +
    "\013\024\017\063\033\070\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\016\005\121\011\014\012\034\016\030\017\020\020" +
    "\013\024\017\063\033\070\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\016\005\036\011\014\012" +
    "\034\016\030\017\020\020\013\024\017\063\033\070\012" +
    "\001\001\000\026\003\016\005\035\011\014\012\034\016" +
    "\030\017\020\020\013\024\017\063\033\070\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\050\001\001\000" +
    "\004\066\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\113\001\001\000\002\001\001" +
    "\000\004\011\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\070\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\123" +
    "\001\001\000\004\021\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\151\001\001\000\004\007\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\016\005" +
    "\141\011\014\012\034\016\030\017\020\020\013\024\017" +
    "\063\033\070\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\016\005\145\011\014" +
    "\012\034\016\030\017\020\020\013\024\017\063\033\070" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\150\001\001\000\002\001\001\000\004\021\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\016" +
    "\005\200\011\014\012\034\016\030\017\020\020\013\024" +
    "\017\063\033\070\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\016\005\206\011\014\012\034" +
    "\016\030\017\020\020\013\024\017\063\033\070\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\220\001\001" +
    "\000\004\065\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\244\001\001\000\004\067\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\247" +
    "\001\001\000\002\001\001\000\004\067\253\001\001\000" +
    "\004\067\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\270\014\271\001\001" +
    "\000\006\004\270\014\330\001\001\000\002\001\001\000" +
    "\004\036\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\304\036\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\311" +
    "\036\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\016\005\314\011\014\012\034\016\030\017\020" +
    "\020\013\024\017\063\033\070\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\323\036" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\016\005\326\011\014\012\034\016\030\017\020\020" +
    "\013\024\017\063\033\070\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\356\001\001\000\002\001\001\000\004\064\363\001\001" +
    "\000\002\001\001\000\004\064\362\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\016\005\u0105\011" +
    "\014\012\034\016\030\017\020\020\013\024\017\063\033" +
    "\070\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u0108\001\001\000\002\001\001\000\026\003\016" +
    "\005\u010a\011\014\012\034\016\030\017\020\020\013\024" +
    "\017\063\033\070\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\016\005\u0110\011\014\012\034" +
    "\016\030\017\020\020\013\024\017\063\033\070\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static int erroresSintacticos=0;
    public int cont = 1;
    public static Nodo padre;
    ArrayList output = new ArrayList();

private Symbol s;
    //obtenidos de la clase Token
public String token_name_from_id(int id){
    switch(id){
        case 0: return "EOF";
        case 1: return "error";
        case 2: return "ITSMAIN";
        case 3: return "ITSDECLARE";
        case 4: return "ITSID";
        case 5: return "ITSASSIGNMENT";
        case 6: return "ITSNUMINT";
        case 7: return "ITSSTRING";
        case 8: return "ITSCHAR";
        case 9: return "ITSTRUE";
        case 10: return "ITSFALSE";
        case 11: return "ITSFOR";
        case 12: return "ITSWHILE";
        case 13: return "ITSSWITCH";
        case 14: return "ITSCOLON";
        case 15: return "ITSSCENARIO";
        case 16: return "ITSIF";
        case 17: return "ITSELSE";
        case 18: return "ITSBRK";
        case 19: return "ITSRETURN";
        case 20: return "ITSNULL";
        case 21: return "ITSSEMICOLON";
        case 22: return "ITSOPREL";
        case 23: return "ITSOPMULT";
        case 24: return "ITSOPSUM";
        case 25: return "ITSBRA_L";
        case 26: return "ITSBRA_R";
        case 27: return "ITSPAR_L";
        case 28: return "ITSPAR_R";
        case 29: return "ITSDFT";
        case 30: return "ITSEXIT";
        case 31: return "ITSCOMMENT";
        case 32: return "ITSAND";
        case 33: return "ITSOR";
        case 34: return "ITSINT";
        case 35: return "ITSSTR";
        case 36: return "ITSTHEN";
        case 37: return "ITSVOID";
        case 38: return "ITSBOOLEAN";
        case 39: return "ITSCHARACTER";
        case 40: return "ITSCOMMA";
        case 41: return "ITSFUNCTION";
        case 42: return "ITSL_COMMENT";
        case 43: return "ITSCONST";
        case 44: return "ITSARRAY";
        case 45: return "ITSBRACKET_L";
        case 46: return "ITSBRACKET_R";

        
        default: return "N/A";
    }
}

//adding
public void syntax_error(Symbol s) {

        //report_error("Error de sintaxis. No se esperaba el siguiente token: <" + s.value + ">. linea: " + (s.left ) + ", columna: " + (s.right ) +     "\n", null);
        
        output.add("Error de sintaxis. No se esperaba el siguiente token: <" + s.value + ">. linea: " + (s.left ) + ", columna: " + (s.right ) +     "\n");
        
        erroresSintacticos++;

        List expected = expected_token_ids();
        if (expected.size() != 0) {
            int id;
            //System.out.println("Se esperaba...");
            output.add("Se esperaba...");
            for (int i = 0; i < expected.size(); i++) {
                id = (int) expected.get(i);
                if (i == expected.size() - 1) {
                    //System.out.println(token_name_from_id(id));
                    output.add(token_name_from_id(id));
                } else {
                    //System.out.print(token_name_from_id(id) + " | ");
                    output.add(token_name_from_id(id) + " | ");
                }
            }
        } else { /* do nothing */ }
}
@Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        //System.out.println("No se pudo reparar y continuar el análisis.");
        output.add("No se pudo reparar y continuar el análisis.");
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TYPE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TYPE ::= ITSSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TYPE ::= ITSBOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TYPE ::= ITSCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TYPE ::= ITSINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALUE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALUE ::= ITSFALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALUE ::= ITSTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALUE ::= ITSNUMINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALUE ::= ITSCHARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALUE ::= ITSSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARRAY ::= ITSBOOLEAN ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARRAY ::= ITSCHAR ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARRAY ::= ITSSTR ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARRAY ::= ITSINT ITSARRAY ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARRAY ::= ITSBOOLEAN ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILLBOOL ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARRAY ::= ITSCHAR ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILLCHAR ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARRAY ::= ITSSTR ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILLSTRING ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARRAY ::= ITSINT ITSARRAY ITSDECLARE ITSID ITSASSIGNMENT ITSBRACKET_L FILL ITSBRACKET_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un array");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARE ::= ITSCONST ITSSTR ITSDECLARE ITSID ITSASSIGNMENT ITSSTRING ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un const string con variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARE ::= ITSCONST ITSSTR ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una const string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARE ::= ITSBOOLEAN ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARE ::= ITSCHAR ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARE ::= ITSSTR ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARE ::= ITSINT ITSDECLARE ITSID ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de una variable");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARE ::= ITSBOOLEAN ITSDECLARE ITSID ITSASSIGNMENT ITSFALSE ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un boolean falso");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARE ::= ITSBOOLEAN ITSDECLARE ITSID ITSASSIGNMENT ITSTRUE ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un boolean verdadero");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARE ::= ITSCHAR ITSDECLARE ITSID ITSASSIGNMENT ITSCHARACTER ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARE ::= ITSSTR ITSDECLARE ITSID ITSASSIGNMENT ITSSTRING ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se detecto una declaracion de un string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARE ::= ITSINT ITSDECLARE ITSID ITSASSIGNMENT ITSNUMINT ITSSEMICOLON 
            {
              Object RESULT =null;
		 parser.output.add("Se detecto una declaracion de entero");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SCENARIO ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCENARIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SCENARIO ::= ITSDFT ITSCOLON STATEMENTS ITSBRK ITSSEMICOLON 
            {
              Object RESULT =null;
		 parser.output.add("Se detecto una declaracion de dft");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCENARIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SCENARIO ::= ITSSCENARIO ITSCHARACTER ITSCOLON STATEMENTS ITSBRK ITSSEMICOLON SCENARIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.output.add("Se detecto una declaracion de scenario");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCENARIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SCENARIO ::= ITSSCENARIO ITSNUMINT ITSCOLON STATEMENTS ITSBRK ITSSEMICOLON SCENARIO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.output.add("Se detecto una declaracion de scenario");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCENARIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCH ::= ITSSWITCH ITSPAR_L ITSID ITSPAR_R ITSBRA_L SCENARIO ITSBRA_R 
            {
              Object RESULT =null;
		 parser.output.add("Se detecto una declaracion de switch");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMPARE ::= ITSID ITSOPREL ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMPARE ::= ITSNUMINT ITSOPREL ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COMPARE ::= ITSID ITSOPREL ITSNUMINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= ITSFOR ITSPAR_L ITSINT ITSDECLARE ITSID ITSASSIGNMENT ITSNUMINT ITSSEMICOLON COMPARE ITSSEMICOLON ITSID ITSOPSUM ITSOPSUM ITSPAR_R ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio un ciclo for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDITION ::= ITSTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDITION ::= ITSID ITSOPREL ITSNUMINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDITION ::= ITSID ITSOPREL ITSFALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONDITION ::= ITSID ITSOPREL ITSTRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONDITION ::= ITSID ITSOPREL ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COND_AND_OR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_AND_OR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND_AND_OR ::= ITSOR CONDITION COND_AND_OR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_AND_OR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND_AND_OR ::= ITSAND CONDITION COND_AND_OR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_AND_OR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF ::= ITSIF ITSPAR_L CONDITION COND_AND_OR ITSPAR_R ITSTHEN ITSBRA_L STATEMENTS ITSBRA_R ITSELSE ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio el bloque IFELSE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= ITSIF ITSPAR_L CONDITION COND_AND_OR ITSPAR_R ITSTHEN ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio el bloque if");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= ITSWHILE ITSPAR_L CONDITION ITSPAR_R ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se detecto un Ciclo While");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FILLBOOL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FILLBOOL ::= ITSCOMMA ITSFALSE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FILLBOOL ::= ITSFALSE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FILLBOOL ::= ITSCOMMA ITSTRUE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FILLBOOL ::= ITSTRUE FILLBOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLBOOL",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FILLCHAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLCHAR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FILLCHAR ::= ITSCOMMA ITSCHAR FILLCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLCHAR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FILLCHAR ::= ITSCHAR FILLCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLCHAR",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FILLSTRING ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLSTRING",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FILLSTRING ::= ITSCOMMA ITSSTRING FILLSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLSTRING",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FILLSTRING ::= ITSSTRING FILLSTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILLSTRING",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FILL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FILL ::= ITSCOMMA ITSNUMINT FILL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FILL ::= ITSNUMINT FILL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FILL",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAM ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAM ::= ITSCOMMA ITSID PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAM ::= ITSID PARAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAM",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARGS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARGS ::= TYPE ITSDECLARE ITSID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGS ::= TYPE ITSDECLARE ITSID ITSCOMMA ARGS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // XPR ::= ITSOPMULT ITSNUMINT 
            {
              Object RESULT =null;
		parser.output.add("Se detecto OPERACION MULT O DIV");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // XPR ::= ITSOPSUM ITSNUMINT 
            {
              Object RESULT =null;
		parser.output.add("Se detecto OPERACION SUMA O RESTA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // XPR ::= ITSID ITSASSIGNMENT ITSNUMINT XPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("XPR",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTS ::= XPR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= VARIABLE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= CALL STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= SWITCH STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= IF STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= FOR STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENTS ::= ARRAY STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENTS ::= DECLARE STATEMENTS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE ::= ITSID ITSASSIGNMENT CALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLE ::= ITSID ITSASSIGNMENT ITSID ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLE ::= ITSID ITSASSIGNMENT ITSTRUE ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLE ::= ITSID ITSASSIGNMENT ITSFALSE ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLE ::= ITSID ITSASSIGNMENT ITSCHARACTER ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLE ::= ITSID ITSASSIGNMENT ITSSTRING ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLE ::= ITSID ITSASSIGNMENT ITSNUMINT ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VARIABLE ::= ITSID ITSOPSUM ITSOPSUM ITSSEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CALL ::= ITSID ITSPAR_L PARAM ITSPAR_R ITSSEMICOLON 
            {
              Object RESULT =null;
		parser.output.add("Se llamo a una Funcion.");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CALL",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNC ::= ITSFUNCTION ITSVOID ITSDECLARE ITSID ITSPAR_L ARGS ITSPAR_R ITSBRA_L STATEMENTS ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio una funcion void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNC ::= ITSFUNCTION TYPE ITSDECLARE ITSID ITSPAR_L ARGS ITSPAR_R ITSBRA_L STATEMENTS ITSRETURN ITSID ITSBRA_R 
            {
              Object RESULT =null;
		parser.output.add("Se reconocio una funcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNC",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCS ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // FUNCS ::= FUNC FUNCS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ITSMAIN ITSBRA_L STATEMENTS ITSBRA_R FUNCS 
            {
              Object RESULT =null;
		int manleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int manright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object man = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    parser.output.add("Se ha reconocido el MAIN");
    
    //Nodo nodo = new Nodo();
    //nodo.setEtiqueta("Main");
    //nodo.setID(parser.cont);
    //parser.cont++;

    //nodo.addHijos((Nodo) man);
    //nodo.addHijos((Nodo) st);
    //nodo.addHijos((Nodo) fn);

    //parser.padre = nodo;

    //RESULT = nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

