
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 22 07:36:39 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 22 07:36:39 CST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\003\011\000\002\003" +
    "\007\000\002\003\007\000\002\012\004\000\002\012\002" +
    "\000\002\016\015\000\002\016\015\000\002\016\015\000" +
    "\002\016\015\000\002\022\006\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\002\000\002" +
    "\015\011\000\002\015\011\000\002\015\011\000\002\015" +
    "\011\000\002\015\011\000\002\023\007\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\005\000" +
    "\002\023\007\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\007\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\014\023\000\002\014\013\000\002" +
    "\014\013\000\002\014\013\000\002\004\003\000\002\004" +
    "\005\000\002\005\011\000\002\013\011\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\021\010\000\002\021\010\000\002\021" +
    "\010\000\002\021\010\000\002\021\010\000\002\021\010" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\024\003\000\002\024\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\006\003\005\013\004\001\002\000\006\003" +
    "\u0101\022\u0102\001\002\000\004\024\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\032\003" +
    "\023\014\033\017\027\021\020\025\uffe9\031\025\033\021" +
    "\040\031\046\032\047\016\050\011\052\030\001\002\000" +
    "\004\052\370\001\002\000\036\003\023\014\033\017\027" +
    "\021\020\023\uffe9\025\uffe9\031\025\033\021\035\uffe9\040" +
    "\031\046\032\047\016\050\011\052\030\001\002\000\036" +
    "\003\023\014\033\017\027\021\020\023\uffe9\025\uffe9\031" +
    "\025\033\021\035\uffe9\040\031\046\032\047\016\050\011" +
    "\052\030\001\002\000\036\003\023\014\033\017\027\021" +
    "\020\023\uffe9\025\uffe9\031\025\033\021\035\uffe9\040\031" +
    "\046\032\047\016\050\011\052\030\001\002\000\036\003" +
    "\023\014\033\017\027\021\020\023\uffe9\025\uffe9\031\025" +
    "\033\021\035\uffe9\040\031\046\032\047\016\050\011\052" +
    "\030\001\002\000\006\003\354\052\353\001\002\000\004" +
    "\025\272\001\002\000\004\022\264\001\002\000\004\022" +
    "\226\001\002\000\036\003\023\014\033\017\027\021\020" +
    "\023\uffe9\025\uffe9\031\025\033\021\035\uffe9\040\031\046" +
    "\032\047\016\050\011\052\030\001\002\000\006\022\214" +
    "\052\213\001\002\000\036\003\023\014\033\017\027\021" +
    "\020\023\uffe9\025\uffe9\031\025\033\021\035\uffe9\040\031" +
    "\046\032\047\016\050\011\052\030\001\002\000\004\052" +
    "\204\001\002\000\036\003\023\014\033\017\027\021\020" +
    "\023\uffe9\025\uffe9\031\025\033\021\035\uffe9\040\031\046" +
    "\032\047\016\050\011\052\030\001\002\000\006\003\160" +
    "\022\161\001\002\000\004\022\113\001\002\000\006\003" +
    "\070\022\071\001\002\000\004\052\060\001\002\000\006" +
    "\003\034\022\035\001\002\000\004\026\054\001\002\000" +
    "\006\003\036\026\037\001\002\000\010\016\043\043\041" +
    "\052\040\001\002\000\010\016\043\043\041\052\040\001" +
    "\002\000\006\003\uffb9\026\uffb9\001\002\000\006\003\uffb8" +
    "\026\uffb8\001\002\000\006\003\044\026\045\001\002\000" +
    "\006\003\uffba\026\uffba\001\002\000\004\023\050\001\002" +
    "\000\006\003\047\023\046\001\002\000\036\003\uffc0\014" +
    "\uffc0\017\uffc0\021\uffc0\023\uffc0\025\uffc0\031\uffc0\033\uffc0" +
    "\035\uffc0\040\uffc0\046\uffc0\047\uffc0\050\uffc0\052\uffc0\001" +
    "\002\000\036\003\uffbb\014\uffbb\017\uffbb\021\uffbb\023\uffbb" +
    "\025\uffbb\031\uffbb\033\uffbb\035\uffbb\040\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\052\uffbb\001\002\000\036\003\uffbd\014\uffbd" +
    "\017\uffbd\021\uffbd\023\uffbd\025\uffbd\031\uffbd\033\uffbd\035" +
    "\uffbd\040\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd\001\002" +
    "\000\004\026\052\001\002\000\004\023\053\001\002\000" +
    "\036\003\uffbe\014\uffbe\017\uffbe\021\uffbe\023\uffbe\025\uffbe" +
    "\031\uffbe\033\uffbe\035\uffbe\040\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\052\uffbe\001\002\000\010\016\043\043\041\052\040" +
    "\001\002\000\004\026\056\001\002\000\004\023\057\001" +
    "\002\000\036\003\uffbc\014\uffbc\017\uffbc\021\uffbc\023\uffbc" +
    "\025\uffbc\031\uffbc\033\uffbc\035\uffbc\040\uffbc\046\uffbc\047" +
    "\uffbc\050\uffbc\052\uffbc\001\002\000\010\003\062\015\063" +
    "\051\061\001\002\000\006\003\065\016\066\001\002\000" +
    "\004\016\064\001\002\000\036\003\uffdf\014\uffdf\017\uffdf" +
    "\021\uffdf\023\uffdf\025\uffdf\031\uffdf\033\uffdf\035\uffdf\040" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\001\002\000\036" +
    "\003\uffe1\014\uffe1\017\uffe1\021\uffe1\023\uffe1\025\uffe1\031" +
    "\uffe1\033\uffe1\035\uffe1\040\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\052\uffe1\001\002\000\036\003\uffe0\014\uffe0\017\uffe0\021" +
    "\uffe0\023\uffe0\025\uffe0\031\uffe0\033\uffe0\035\uffe0\040\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\052\uffe0\001\002\000\004\015" +
    "\067\001\002\000\036\003\uffe3\014\uffe3\017\uffe3\021\uffe3" +
    "\023\uffe3\025\uffe3\031\uffe3\033\uffe3\035\uffe3\040\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\052\uffe3\001\002\000\010\016\075" +
    "\043\073\052\072\001\002\000\012\003\074\016\075\043" +
    "\073\052\072\001\002\000\006\003\uffc3\023\uffc3\001\002" +
    "\000\006\003\uffc2\023\uffc2\001\002\000\004\023\106\001" +
    "\002\000\006\003\uffc1\023\uffc1\001\002\000\006\003\077" +
    "\023\100\001\002\000\004\024\105\001\002\000\006\003" +
    "\101\024\102\001\002\000\036\003\uffc4\014\uffc4\017\uffc4" +
    "\021\uffc4\023\uffc4\025\uffc4\031\uffc4\033\uffc4\035\uffc4\040" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\001\002\000\002" +
    "\001\002\000\004\025\104\001\002\000\036\003\uffc9\014" +
    "\uffc9\017\uffc9\021\uffc9\023\uffc9\025\uffc9\031\uffc9\033\uffc9" +
    "\035\uffc9\040\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\001" +
    "\002\000\036\003\uffc5\014\uffc5\017\uffc5\021\uffc5\023\uffc5" +
    "\025\uffc5\031\uffc5\033\uffc5\035\uffc5\040\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\052\uffc5\001\002\000\004\024\107\001\002" +
    "\000\036\003\uffc6\014\uffc6\017\uffc6\021\uffc6\023\uffc6\025" +
    "\uffc6\031\uffc6\033\uffc6\035\uffc6\040\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\052\uffc6\001\002\000\004\023\111\001\002\000" +
    "\004\024\112\001\002\000\036\003\uffc7\014\uffc7\017\uffc7" +
    "\021\uffc7\023\uffc7\025\uffc7\031\uffc7\033\uffc7\035\uffc7\040" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7\001\002\000\014" +
    "\016\116\026\120\044\117\045\114\052\124\001\002\000" +
    "\020\003\uffb6\011\uffb6\012\uffb6\023\uffb6\027\uffb6\030\uffb6" +
    "\032\uffb6\001\002\000\012\003\uffb1\023\uffb1\027\154\030" +
    "\153\001\002\000\014\011\uffb7\012\uffb7\023\uffb7\032\uffb7" +
    "\037\145\001\002\000\020\003\uffb5\011\uffb5\012\uffb5\023" +
    "\uffb5\027\uffb5\030\uffb5\032\uffb5\001\002\000\010\016\043" +
    "\043\041\052\040\001\002\000\004\023\136\001\002\000" +
    "\004\023\135\001\002\000\012\011\127\012\125\023\uffcc" +
    "\032\130\001\002\000\020\003\uffb4\011\uffb4\012\uffb4\023" +
    "\uffb4\027\uffb4\030\uffb4\032\uffb4\001\002\000\012\016\uffae" +
    "\044\uffae\045\uffae\052\uffae\001\002\000\012\016\131\044" +
    "\117\045\114\052\124\001\002\000\012\016\131\044\117" +
    "\045\114\052\124\001\002\000\012\016\uffaf\044\uffaf\045" +
    "\uffaf\052\uffaf\001\002\000\020\003\uffb7\011\uffb7\012\uffb7" +
    "\023\uffb7\027\uffb7\030\uffb7\032\uffb7\001\002\000\006\011" +
    "\127\023\uffcc\001\002\000\004\023\uffcb\001\002\000\012" +
    "\003\uffb0\023\uffb0\027\uffb0\030\uffb0\001\002\000\036\003" +
    "\ufff7\014\ufff7\017\ufff7\021\ufff7\023\ufff7\025\ufff7\031\ufff7" +
    "\033\ufff7\035\ufff7\040\ufff7\046\ufff7\047\ufff7\050\ufff7\052" +
    "\ufff7\001\002\000\004\024\137\001\002\000\032\003\023" +
    "\014\033\017\027\021\020\025\uffe9\031\025\033\021\040" +
    "\031\046\032\047\016\050\011\052\030\001\002\000\004" +
    "\025\141\001\002\000\036\003\uffe7\014\uffe7\017\uffe7\021" +
    "\uffe7\023\uffe7\025\uffe7\031\uffe7\033\uffe7\035\uffe7\040\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\052\uffe7\001\002\000\004\026" +
    "\143\001\002\000\004\023\144\001\002\000\036\003\uffbf" +
    "\014\uffbf\017\uffbf\021\uffbf\023\uffbf\025\uffbf\031\uffbf\033" +
    "\uffbf\035\uffbf\040\uffbf\046\uffbf\047\uffbf\050\uffbf\052\uffbf" +
    "\001\002\000\004\016\146\001\002\000\004\023\147\001" +
    "\002\000\004\024\150\001\002\000\032\003\023\014\033" +
    "\017\027\021\020\025\uffe9\031\025\033\021\040\031\046" +
    "\032\047\016\050\011\052\030\001\002\000\004\025\152" +
    "\001\002\000\036\003\uffcf\014\uffcf\017\uffcf\021\uffcf\023" +
    "\uffcf\025\uffcf\031\uffcf\033\uffcf\035\uffcf\040\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\052\uffcf\001\002\000\012\016\131\044" +
    "\117\045\114\052\124\001\002\000\012\016\131\044\117" +
    "\045\114\052\124\001\002\000\006\012\125\032\130\001" +
    "\002\000\006\003\uffb3\023\uffb3\001\002\000\006\003\uffb2" +
    "\023\uffb2\001\002\000\012\016\131\044\117\045\114\052" +
    "\124\001\002\000\012\016\131\044\117\045\114\052\124" +
    "\001\002\000\006\003\163\023\164\001\002\000\004\024" +
    "\173\001\002\000\006\003\165\024\166\001\002\000\032" +
    "\003\023\014\033\017\027\021\020\025\uffe9\031\025\033" +
    "\021\040\031\046\032\047\016\050\011\052\030\001\002" +
    "\000\032\003\023\014\033\017\027\021\020\025\uffe9\031" +
    "\025\033\021\040\031\046\032\047\016\050\011\052\030" +
    "\001\002\000\004\025\170\001\002\000\036\003\uffe8\014" +
    "\uffe8\017\uffe8\021\uffe8\023\uffe8\025\uffe8\031\uffe8\033\uffe8" +
    "\035\uffe8\040\uffe8\046\uffe8\047\uffe8\050\uffe8\052\uffe8\001" +
    "\002\000\004\025\172\001\002\000\036\003\uffe4\014\uffe4" +
    "\017\uffe4\021\uffe4\023\uffe4\025\uffe4\031\uffe4\033\uffe4\035" +
    "\uffe4\040\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\001\002" +
    "\000\032\003\023\014\033\017\027\021\020\025\uffe9\031" +
    "\025\033\021\040\031\046\032\047\016\050\011\052\030" +
    "\001\002\000\004\025\175\001\002\000\036\003\uffe5\014" +
    "\uffe5\017\uffe5\021\uffe5\023\uffe5\025\uffe5\031\uffe5\033\uffe5" +
    "\035\uffe5\040\uffe5\046\uffe5\047\uffe5\050\uffe5\052\uffe5\001" +
    "\002\000\004\023\177\001\002\000\004\024\200\001\002" +
    "\000\032\003\023\014\033\017\027\021\020\025\uffe9\031" +
    "\025\033\021\040\031\046\032\047\016\050\011\052\030" +
    "\001\002\000\004\025\202\001\002\000\036\003\uffe6\014" +
    "\uffe6\017\uffe6\021\uffe6\023\uffe6\025\uffe6\031\uffe6\033\uffe6" +
    "\035\uffe6\040\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\001" +
    "\002\000\010\023\uffef\025\uffef\035\uffef\001\002\000\006" +
    "\003\206\051\205\001\002\000\006\003\211\020\210\001" +
    "\002\000\004\020\207\001\002\000\036\003\uffd2\014\uffd2" +
    "\017\uffd2\021\uffd2\023\uffd2\025\uffd2\031\uffd2\033\uffd2\035" +
    "\uffd2\040\uffd2\046\uffd2\047\uffd2\050\uffd2\052\uffd2\001\002" +
    "\000\036\003\uffd4\014\uffd4\017\uffd4\021\uffd4\023\uffd4\025" +
    "\uffd4\031\uffd4\033\uffd4\035\uffd4\040\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\052\uffd4\001\002\000\036\003\uffd1\014\uffd1\017" +
    "\uffd1\021\uffd1\023\uffd1\025\uffd1\031\uffd1\033\uffd1\035\uffd1" +
    "\040\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1\001\002\000" +
    "\010\023\uffec\025\uffec\035\uffec\001\002\000\004\051\220" +
    "\001\002\000\010\016\075\043\073\052\072\001\002\000" +
    "\004\023\216\001\002\000\004\024\217\001\002\000\036" +
    "\003\uffc8\014\uffc8\017\uffc8\021\uffc8\023\uffc8\025\uffc8\031" +
    "\uffc8\033\uffc8\035\uffc8\040\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\052\uffc8\001\002\000\012\016\223\020\222\043\221\045" +
    "\224\001\002\000\036\003\uffd8\014\uffd8\017\uffd8\021\uffd8" +
    "\023\uffd8\025\uffd8\031\uffd8\033\uffd8\035\uffd8\040\uffd8\046" +
    "\uffd8\047\uffd8\050\uffd8\052\uffd8\001\002\000\036\003\uffd3" +
    "\014\uffd3\017\uffd3\021\uffd3\023\uffd3\025\uffd3\031\uffd3\033" +
    "\uffd3\035\uffd3\040\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3" +
    "\001\002\000\036\003\uffe2\014\uffe2\017\uffe2\021\uffe2\023" +
    "\uffe2\025\uffe2\031\uffe2\033\uffe2\035\uffe2\040\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\052\uffe2\001\002\000\036\003\uffdd\014" +
    "\uffdd\017\uffdd\021\uffdd\023\uffdd\025\uffdd\031\uffdd\033\uffdd" +
    "\035\uffdd\040\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd\001" +
    "\002\000\010\023\uffea\025\uffea\035\uffea\001\002\000\010" +
    "\003\227\016\230\046\231\001\002\000\004\037\256\001" +
    "\002\000\004\003\250\001\002\000\004\052\232\001\002" +
    "\000\004\051\233\001\002\000\004\046\234\001\002\000" +
    "\004\015\235\001\002\000\004\052\236\001\002\000\004" +
    "\032\237\001\002\000\004\046\240\001\002\000\004\015" +
    "\241\001\002\000\004\052\242\001\002\000\004\007\243" +
    "\001\002\000\004\023\244\001\002\000\004\024\245\001" +
    "\002\000\032\003\023\014\033\017\027\021\020\025\uffe9" +
    "\031\025\033\021\040\031\046\032\047\016\050\011\052" +
    "\030\001\002\000\004\025\247\001\002\000\036\003\uffd0" +
    "\014\uffd0\017\uffd0\021\uffd0\023\uffd0\025\uffd0\031\uffd0\033" +
    "\uffd0\035\uffd0\040\uffd0\046\uffd0\047\uffd0\050\uffd0\052\uffd0" +
    "\001\002\000\004\016\251\001\002\000\004\023\252\001" +
    "\002\000\004\024\253\001\002\000\032\003\023\014\033" +
    "\017\027\021\020\025\uffe9\031\025\033\021\040\031\046" +
    "\032\047\016\050\011\052\030\001\002\000\004\025\255" +
    "\001\002\000\036\003\uffcd\014\uffcd\017\uffcd\021\uffcd\023" +
    "\uffcd\025\uffcd\031\uffcd\033\uffcd\035\uffcd\040\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\052\uffcd\001\002\000\004\016\257\001" +
    "\002\000\004\023\260\001\002\000\004\024\261\001\002" +
    "\000\032\003\023\014\033\017\027\021\020\025\uffe9\031" +
    "\025\033\021\040\031\046\032\047\016\050\011\052\030" +
    "\001\002\000\004\025\263\001\002\000\036\003\uffce\014" +
    "\uffce\017\uffce\021\uffce\023\uffce\025\uffce\031\uffce\033\uffce" +
    "\035\uffce\040\uffce\046\uffce\047\uffce\050\uffce\052\uffce\001" +
    "\002\000\012\016\131\044\117\045\114\052\124\001\002" +
    "\000\004\023\266\001\002\000\004\024\267\001\002\000" +
    "\032\003\023\014\033\017\027\021\020\025\uffe9\031\025" +
    "\033\021\040\031\046\032\047\016\050\011\052\030\001" +
    "\002\000\004\025\271\001\002\000\036\003\uffca\014\uffca" +
    "\017\uffca\021\uffca\023\uffca\025\uffca\031\uffca\033\uffca\035" +
    "\uffca\040\uffca\046\uffca\047\uffca\050\uffca\052\uffca\001\002" +
    "\000\010\002\ufffc\003\273\010\274\001\002\000\016\003" +
    "\301\031\300\034\303\046\304\047\302\050\305\001\002" +
    "\000\016\003\301\031\300\034\303\046\304\047\302\050" +
    "\305\001\002\000\004\002\uffff\001\002\000\010\002\ufffc" +
    "\003\273\010\274\001\002\000\004\002\ufffd\001\002\000" +
    "\006\003\ufff2\052\ufff2\001\002\000\006\003\ufff1\052\ufff1" +
    "\001\002\000\006\003\ufff4\052\ufff4\001\002\000\006\003" +
    "\ufff6\052\ufff6\001\002\000\006\003\ufff5\052\ufff5\001\002" +
    "\000\006\003\ufff3\052\ufff3\001\002\000\006\003\310\052" +
    "\307\001\002\000\006\003\321\022\322\001\002\000\004" +
    "\022\311\001\002\000\012\016\131\044\117\045\114\052" +
    "\124\001\002\000\004\023\313\001\002\000\004\024\314" +
    "\001\002\000\032\003\023\014\033\017\027\021\020\031" +
    "\025\033\021\035\uffe9\040\031\046\032\047\016\050\011" +
    "\052\030\001\002\000\004\035\316\001\002\000\004\052" +
    "\317\001\002\000\004\025\320\001\002\000\010\002\ufff9" +
    "\003\ufff9\010\ufff9\001\002\000\012\016\131\044\117\045" +
    "\114\052\124\001\002\000\012\016\131\044\117\045\114" +
    "\052\124\001\002\000\004\023\324\001\002\000\004\024" +
    "\325\001\002\000\032\003\023\014\033\017\027\021\020" +
    "\031\025\033\021\035\uffe9\040\031\046\032\047\016\050" +
    "\011\052\030\001\002\000\004\035\327\001\002\000\004" +
    "\052\330\001\002\000\004\025\331\001\002\000\010\002" +
    "\ufffb\003\ufffb\010\ufffb\001\002\000\004\023\333\001\002" +
    "\000\004\024\334\001\002\000\032\003\023\014\033\017" +
    "\027\021\020\031\025\033\021\035\uffe9\040\031\046\032" +
    "\047\016\050\011\052\030\001\002\000\004\035\336\001" +
    "\002\000\004\052\337\001\002\000\004\025\340\001\002" +
    "\000\010\002\ufff8\003\ufff8\010\ufff8\001\002\000\004\052" +
    "\342\001\002\000\004\022\343\001\002\000\012\016\131" +
    "\044\117\045\114\052\124\001\002\000\004\023\345\001" +
    "\002\000\004\024\346\001\002\000\032\003\023\014\033" +
    "\017\027\021\020\031\025\033\021\035\uffe9\040\031\046" +
    "\032\047\016\050\011\052\030\001\002\000\004\035\350" +
    "\001\002\000\004\052\351\001\002\000\004\025\352\001" +
    "\002\000\010\002\ufffa\003\ufffa\010\ufffa\001\002\000\006" +
    "\003\360\051\357\001\002\000\004\051\355\001\002\000" +
    "\004\043\356\001\002\000\036\003\uffd7\014\uffd7\017\uffd7" +
    "\021\uffd7\023\uffd7\025\uffd7\031\uffd7\033\uffd7\035\uffd7\040" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\001\002\000\006" +
    "\003\363\043\362\001\002\000\004\043\361\001\002\000" +
    "\036\003\uffd6\014\uffd6\017\uffd6\021\uffd6\023\uffd6\025\uffd6" +
    "\031\uffd6\033\uffd6\035\uffd6\040\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\052\uffd6\001\002\000\036\003\uffd9\014\uffd9\017\uffd9" +
    "\021\uffd9\023\uffd9\025\uffd9\031\uffd9\033\uffd9\035\uffd9\040" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\001\002\000\036" +
    "\003\uffd5\014\uffd5\017\uffd5\021\uffd5\023\uffd5\025\uffd5\031" +
    "\uffd5\033\uffd5\035\uffd5\040\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\052\uffd5\001\002\000\010\023\uffee\025\uffee\035\uffee\001" +
    "\002\000\010\023\uffeb\025\uffeb\035\uffeb\001\002\000\010" +
    "\023\ufff0\025\ufff0\035\ufff0\001\002\000\010\023\uffed\025" +
    "\uffed\035\uffed\001\002\000\006\003\372\051\371\001\002" +
    "\000\010\003\375\044\374\045\376\001\002\000\004\045" +
    "\373\001\002\000\036\003\uffdc\014\uffdc\017\uffdc\021\uffdc" +
    "\023\uffdc\025\uffdc\031\uffdc\033\uffdc\035\uffdc\040\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\052\uffdc\001\002\000\004\015\u0100" +
    "\001\002\000\036\003\uffdb\014\uffdb\017\uffdb\021\uffdb\023" +
    "\uffdb\025\uffdb\031\uffdb\033\uffdb\035\uffdb\040\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\052\uffdb\001\002\000\004\015\377\001" +
    "\002\000\036\003\uffde\014\uffde\017\uffde\021\uffde\023\uffde" +
    "\025\uffde\031\uffde\033\uffde\035\uffde\040\uffde\046\uffde\047" +
    "\uffde\050\uffde\052\uffde\001\002\000\036\003\uffda\014\uffda" +
    "\017\uffda\021\uffda\023\uffda\025\uffda\031\uffda\033\uffda\035" +
    "\uffda\040\uffda\046\uffda\047\uffda\050\uffda\052\uffda\001\002" +
    "\000\032\003\023\014\033\017\027\021\020\025\uffe9\031" +
    "\025\033\021\040\031\046\032\047\016\050\011\052\030" +
    "\001\002\000\032\003\023\014\033\017\027\021\020\023" +
    "\uffe9\031\025\033\021\040\031\046\032\047\016\050\011" +
    "\052\030\001\002\000\004\023\u0104\001\002\000\004\024" +
    "\u0105\001\002\000\032\003\023\014\033\017\027\021\020" +
    "\025\uffe9\031\025\033\021\040\031\046\032\047\016\050" +
    "\011\052\030\001\002\000\004\025\u0107\001\002\000\004" +
    "\002\000\001\002\000\004\025\u0109\001\002\000\010\002" +
    "\ufffc\003\273\010\274\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\004\003\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\011\007\016\013\013\014\025\015\014\021\021\022" +
    "\023\023\012\001\001\000\002\001\001\000\022\005\011" +
    "\007\366\013\013\014\025\015\014\021\021\022\023\023" +
    "\012\001\001\000\022\005\011\007\365\013\013\014\025" +
    "\015\014\021\021\022\023\023\012\001\001\000\022\005" +
    "\011\007\364\013\013\014\025\015\014\021\021\022\023" +
    "\023\012\001\001\000\022\005\011\007\363\013\013\014" +
    "\025\015\014\021\021\022\023\023\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\011\007\224\013\013\014\025\015\014" +
    "\021\021\022\023\023\012\001\001\000\002\001\001\000" +
    "\022\005\011\007\211\013\013\014\025\015\014\021\021" +
    "\022\023\023\012\001\001\000\002\001\001\000\022\005" +
    "\011\007\202\013\013\014\025\015\014\021\021\022\023" +
    "\023\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\050\001\001\000" +
    "\004\002\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\107\001\001\000\004\006\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\121\020\122\025\120\026\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\133\001\001" +
    "\000\006\004\132\020\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\011\007\137\013\013\014\025\015\014\021\021\022\023" +
    "\023\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\011\007\150\013\013\014\025\015\014\021\021\022\023" +
    "\023\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\154\025\156\026\114\001\001\000\010\020\154" +
    "\025\155\026\114\001\001\000\004\024\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\154\025\175" +
    "\026\114\001\001\000\010\020\154\025\161\026\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\011\007\170\013\013\014\025\015\014\021" +
    "\021\022\023\023\012\001\001\000\022\005\011\007\166" +
    "\013\013\014\025\015\014\021\021\022\023\023\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\011\007\173\013\013\014" +
    "\025\015\014\021\021\022\023\023\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\011\007\200\013\013\014\025\015\014" +
    "\021\021\022\023\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\011\007\245\013\013\014\025\015\014\021\021\022" +
    "\023\023\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\011\007\253\013\013\014\025\015\014\021\021" +
    "\022\023\023\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\011\007\261\013\013\014\025\015\014\021" +
    "\021\022\023\023\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\154\025\264\026\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\011\007\267" +
    "\013\013\014\025\015\014\021\021\022\023\023\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\274" +
    "\016\275\001\001\000\004\017\340\001\001\000\004\017" +
    "\305\001\001\000\002\001\001\000\006\012\276\016\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\311\020\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\011\007\314\013" +
    "\013\014\025\015\014\021\021\022\023\023\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\331\020\131\001\001\000\006" +
    "\004\322\020\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\011\007\325\013\013\014\025\015\014" +
    "\021\021\022\023\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\011\007\334\013" +
    "\013\014\025\015\014\021\021\022\023\023\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\343\020\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\011\007\346\013\013\014\025\015\014" +
    "\021\021\022\023\023\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\011\007" +
    "\u0107\013\013\014\025\015\014\021\021\022\023\023\012" +
    "\001\001\000\022\005\011\007\u0102\013\013\014\025\015" +
    "\014\021\021\022\023\023\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\011\007\u0105\013\013\014" +
    "\025\015\014\021\021\022\023\023\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u0109\016\275\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     ArrayList gramas = new ArrayList();
    public Nodo raiz;
    public int cont = 0;
    public int maximo(){
    int a=5;
    return a;
}
    ArrayList errores=new ArrayList();
    public Symbol s;
    @Override
    public void syntax_error (Symbol s){
        if(s.left==-1){
        }else{
                errores.add("En la linea: " + (s.left) + " y Columna: " +(s.right)+ " con el simbolo= "+(s.value));
    }
}
    @Override
    public void unrecovered_syntax_error(Symbol s){
    if(s.left==-1){
    }else{
        errores.add("Error desconocido, por favor revise la linea: " + (s.left ) + " y columna:  " + (s.right )+ "Con simbolo: "+s.value);
    }    
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPCONDITION ::= ITS_COMPARE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDITION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPCONDITION ::= ITS_OPREL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCONDITION",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONDITIONP ::= VAL OPCONDITION VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("CONDITIONP",parser.cont);
                parser.cont++;
                nodo.addHijo(v);
                nodo.addHijo(o);
                nodo.addHijo(v2);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITIONP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONDITION ::= CONDITIONP 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Nodo nodo= new Nodo("CONDITION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONDITION ::= CONDITIONP ITS_OR CONDITION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDITION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++; 
                nodo.addHijo(o);
                RESULT=nodo;              
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDITION ::= CONDITIONP ITS_AND CONDITION 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo o = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo("CONDITION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;                
                nodo.addHijo(o);
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDITION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VAL ::= ITS_ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VAL ::= ITS_FALSE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAL ::= ITS_TRUE 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAL ::= ITS_DIGIT 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo= new Nodo(id.toString(),parser.cont);
                parser.cont++;
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOPRI ::= ITS_LETTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOPRI ::= ITS_ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOPRI ::= ITS_DIGIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOPRI",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRINT ::= ITS_PRINT ITS_PAR_L ITS_QUOTE TIPOPRI ITS_QUOTE error 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un ')' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRINT ::= ITS_PRINT error ITS_QUOTE TIPOPRI ITS_QUOTE ITS_PAR_R 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta un '(' \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRINT ::= ITS_PRINT ITS_PAR_L ITS_QUOTE TIPOPRI error ITS_PAR_R 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRINT ::= ITS_PRINT ITS_PAR_L error TIPOPRI ITS_QUOTE ITS_PAR_R 
            {
              Nodo RESULT =null;
		parser.errores.add(" falta una '\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINT ::= ITS_ID ITS_PAR_L ITS_QUOTE TIPOPRI ITS_QUOTE ITS_PAR_R 
            {
              Nodo RESULT =null;
		parser.errores.add(" Sout mal escrito\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINT ::= ITS_PRINT ITS_PAR_L ITS_QUOTE TIPOPRI ITS_QUOTE ITS_PAR_R 
            {
              Nodo RESULT =null;
		parser.gramas.add("Una Impresion Reconocida ");
    Nodo nodo = new Nodo("SOUT",parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOSW ::= ITS_DIGIT 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOSW ::= ITS_LETTER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOSW ::= ITS_ID 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(s.toString(),parser.cont);
    parser.cont++;
    RESULT=nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSW",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SWITCH ::= ITS_SWITCH ITS_PAR_L TIPOSW ITS_PAR_R error 
            {
              Nodo RESULT =null;
		parser.errores.add(" No se puso '{' en el Switch \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SWITCH ::= ITS_SWITCH ITS_PAR_L TIPOSW error ITS_CURLY_I 
            {
              Nodo RESULT =null;
		parser.errores.add(" No se puso ')'\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCH ::= ITS_SWITCH ITS_PAR_L error ITS_PAR_R ITS_CURLY_I 
            {
              Nodo RESULT =null;
		parser.errores.add(" no ingreso un tipo valido en el switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCH ::= ITS_SWITCH error TIPOSW ITS_PAR_R ITS_CURLY_I 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta un ( \n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWITCH ::= error ITS_PAR_L TIPOSW ITS_PAR_R ITS_CURLY_I 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta el enunciado switch\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCH ::= ITS_SWITCH ITS_PAR_L TIPOSW ITS_PAR_R ITS_CURLY_I CASOSA ITS_CURLY_D 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo cas = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Un Bloque Switch Reconocido ");
        Nodo nodo= new Nodo("SWITCH",parser.cont);
        parser.cont++;
        nodo.addHijo(s);
        nodo.addHijo(cas);
        RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WHILE ::= ITS_WHILE ITS_PAR_L CONDITION ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo C = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Un Bloque While Reconocido ");
        Nodo nodo = new Nodo("WHILE",parser.cont);
        parser.cont++;
        nodo.addHijo(C);
        nodo.addHijo(s);
        RESULT=nodo;   
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_ARGS ::= VAL ITS_COMMA LISTA_ARGS 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo =new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            nodo.addHijo(s);
            RESULT= nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_ARGS ::= VAL 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("ARGUMENTOS",parser.cont);
            parser.cont++;
            nodo.addHijo(v);
            RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARGS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= ITS_FOR ITS_PAR_L ITS_DIGIT error ITS_DIGIT ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner '::'en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR ::= ITS_FOR ITS_PAR_L error ITS_COLON ITS_DIGIT ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner un VAL de inicio en el for");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= ITS_ID ITS_PAR_L ITS_DIGIT ITS_COLON ITS_DIGIT ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add(" Falta poner FOR o se escribio mal");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= ITS_FOR ITS_PAR_L ITS_INT ITS_ID ITS_ASSIGNAMENT ITS_INT ITS_SEMICOLON ITS_ID ITS_OPREL ITS_INT ITS_SEMICOLON ITS_ID ITS_OPINCDEC ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		
        /*parser.gramas.add("Un Bloque FOR Reconocido ");
        Nodo nodo = new Nodo("FOR",parser.cont);
        parser.cont++;
        nodo.addHijo(new Nodo(di.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(new Nodo (di2.toString(),parser.cont));
        parser.cont++;
        nodo.addHijo(s);    
        RESULT=nodo;*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= ITS_FLOAT ITS_ID ITS_ASSIGNAMENT error 
            {
              Nodo RESULT =null;
		parser.errores.add("falta un VAL FLOAT para la declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= ITS_FLOAT ITS_ID error ITS_DIGITFLOAT 
            {
              Nodo RESULT =null;
		parser.errores.add("falta '=' de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= error ITS_ID ITS_ASSIGNAMENT ITS_DIGITFLOAT 
            {
              Nodo RESULT =null;
		parser.errores.add("falta el tipo FLOAT de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= ITS_FLOAT ITS_ID ITS_ASSIGNAMENT ITS_DIGITFLOAT 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida ");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= ITS_CHAR ITS_ID ITS_ASSIGNAMENT error 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso un VAL al char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= ITS_CHAR ITS_ID error ITS_LETTER 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso '='");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= ITS_CHAR error ITS_ASSIGNAMENT ITS_LETTER 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso el id");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= error ITS_ID ITS_ASSIGNAMENT ITS_LETTER 
            {
              Nodo RESULT =null;
		parser.errores.add("no se puso el tipo char");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= ITS_CHAR ITS_ID ITS_ASSIGNAMENT ITS_LETTER 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.gramas.add("Una Asignacion Reconocida ");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= ITS_BOOLEAN ITS_ID ITS_ASSIGNAMENT ITS_FALSE ITS_SEMICOLON 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Una Asignacion Reconocida ");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= ITS_BOOLEAN ITS_ID ITS_ASSIGNAMENT error 
            {
              Nodo RESULT =null;
		parser.errores.add("falta un VAL TRUE para la declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= ITS_BOOLEAN ITS_ID error ITS_TRUE 
            {
              Nodo RESULT =null;
		parser.errores.add("falta '=' de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= error ITS_ID ITS_ASSIGNAMENT ITS_TRUE 
            {
              Nodo RESULT =null;
		parser.errores.add("falta el tipo BOOLEAN de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= ITS_BOOLEAN ITS_ID ITS_ASSIGNAMENT ITS_TRUE ITS_SEMICOLON 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Una Asignacion Reconocida ");
Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= ITS_INT ITS_ID ITS_SEMICOLON 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Una Asignacion Reconocida ");
    Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    RESULT=nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= ITS_INT ITS_ID ITS_ASSIGNAMENT error 
            {
              Nodo RESULT =null;
		parser.errores.add("falta un VAL para la declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= ITS_INT ITS_ID error ITS_DIGIT 
            {
              Nodo RESULT =null;
		parser.errores.add("falta '=' de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= error ITS_ID ITS_ASSIGNAMENT ITS_DIGIT 
            {
              Nodo RESULT =null;
		parser.errores.add("falta el tipo Int de declaracion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= ITS_INT ITS_ID ITS_ASSIGNAMENT ITS_DIGIT ITS_SEMICOLON 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object di = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.gramas.add("Una Asignacion Reconocida ");
    Nodo nodo = new Nodo("DECLARACION",parser.cont);
    parser.cont++;
    nodo.addHijo(new Nodo(i.toString(),parser.cont));
    parser.cont++;
    nodo.addHijo(new Nodo(di.toString(),parser.cont));
    parser.cont++;  
    RESULT=nodo;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= ITS_IF ITS_PAR_L CONDITION ITS_PAR_R error STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner '{' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= ITS_IF ITS_PAR_L CONDITION error ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner ')' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= ITS_IF error CONDITION ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner '(' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= ITS_ID ITS_PAR_L CONDITION ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner 'IF' o se escribio mal ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= ITS_IF ITS_PAR_L CONDITION ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		int di2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int di2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo di2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.gramas.add("Un Bloque IF Reconocido ");
    Nodo nodo= new Nodo("IF",parser.cont);
    parser.cont++;
    nodo.addHijo(di2);
    nodo.addHijo(s);
    RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENTS ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    node.addHijo(new Nodo("VACIO",parser.cont++));
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENTS ::= PRINT STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENTS ::= SWITCH STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENTS ::= LLAMADO STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENTS ::= WHILE STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENTS ::= IF STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENTS ::= FOR STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENTS ::= DECLARACION STATEMENTS 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("STATEMENT",parser.cont);
                parser.cont++;
                nodo.addHijo(i);
                nodo.addHijo(s);
                RESULT=nodo;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= error 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un tipo valido de FUNCTION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= ITS_FLOAT 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= ITS_BOOLEAN 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= ITS_CHAR 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO ::= ITS_INT 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= ITS_VOID 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Nodo nodo= new Nodo(s.toString(),parser.cont);
            parser.cont++;
            RESULT=nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LLAMADO ::= ITS_ID ITS_PAR_L LISTA_ARGS ITS_PAR_R 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo li = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                parser.gramas.add("Un Llamado de FUNCTION Reconocido ");
                Nodo nodo = new Nodo("LLAMADO",parser.cont);
                parser.cont++;                
                nodo.addHijo(new Nodo(id.toString(),parser.cont));
                parser.cont++;
                nodo.addHijo(li);
                RESULT=nodo;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTION ::= ITS_FUNCTION TIPO ITS_ID error LISTA_ARGS ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_RETURN ITS_ID ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un '(' en FUNCTION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCTION ::= ITS_FUNCTION TIPO error ITS_PAR_L LISTA_ARGS ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_RETURN ITS_ID ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add("No se puso un ID valido de FUNCTION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCTION ::= error TIPO ITS_ID ITS_PAR_L LISTA_ARGS ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_RETURN ITS_ID ITS_CURLY_D 
            {
              Nodo RESULT =null;
		parser.errores.add("Falta poner 'Fun' ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCTION ::= ITS_FUNCTION TIPO ITS_ID ITS_PAR_L LISTA_ARGS ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_RETURN ITS_ID ITS_CURLY_D 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo lis = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		parser.gramas.add("Una FUNCTION Reconocida ");    
                Nodo nodo = new Nodo(id.toString(),parser.cont);
                parser.cont++;
                nodo.addHijo(s);
                nodo.addHijo(lis);
                
                nodo.addHijo(b);//statements
         
                RESULT=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCTIONES ::= 
            {
              Nodo RESULT =null;
		
                    Nodo node = new Nodo("VACIO",parser.cont);
                    parser.cont++;
                    RESULT = node;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCTIONES ::= FUNCTION FUNCTIONES 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo("FUNCTION",parser.cont);
                parser.cont++;
                nodo.addHijo(s);   
                nodo.addHijo(i);
                //System.out.println("nodo i");
                RESULT=nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCTIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= ITS_MAIN error STATEMENTS ITS_CURLY_D FUNCTIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("\nfalta '{' en el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error ITS_CURLY_I STATEMENTS ITS_CURLY_D FUNCTIONES 
            {
              Nodo RESULT =null;
		parser.errores.add("\nFalta el Main o esta mal escrito");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ITS_MAIN ITS_PAR_L STATEMENTS ITS_PAR_R ITS_CURLY_I STATEMENTS ITS_CURLY_D 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.gramas.add("Bloque Main Reconocido ");
        //System.out.println(id);
        Nodo nodo = new Nodo(id.toString(),parser.cont);
        parser.cont++;
        nodo.addHijo(b);
        //System.out.println("nodo b");
        nodo.addHijo(d); 
        //System.out.println("nodo d");       
        parser.raiz=nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

